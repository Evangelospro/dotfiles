{
	"angr template": {
		"scope": "python",
		"prefix": "angr temp",
		"body": [
			"import angr",
			"import claripy",
			"import sys",
			"import os",
			"",
			"# from string import printable",
			"printable = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_{}'",
			"binary_path =  './$1'",
			"",
			"def debug(output):",
			"    if len(sys.argv) > 1 and sys.argv[1].lower() == 'debug':",
			"        print(output)",
			"def successful(state):",
			"    output = state.posix.dumps(sys.stdout.fileno())",
			"    debug(output)",
			"    if b'That key is valid.' in output:",
			"        return True",
			"    return False",
			"",
			"def failed(state):",
			"    output = state.posix.dumps(sys.stdout.fileno())",
			"    debug(output)",
			"    if b'That key is invalid.' in output:",
			"        return True",
			"    return False",
			"",
			"def hook(l=None):",
			"    if l:",
			"        locals().update(l)",
			"    import IPython",
			"    IPython.embed(banner1='', confirm_exit=False)",
			"    exit(0)",
			"",
			"base_addr = 0x00000000",
			"target_addr = ['0x00000000']",
			"avoid_addr = ['0x00000000']",
			"# String -> 8 bytes",
			"# Int -> 4 bytes",
			"inp_len = $2",
			"prefix = '$3{'",
			"suffix = '}'",
			"inp_chars = [claripy.BVS('inp_%d' % i, 8) for i in range(inp_len - len(suffix))]",
			"inp = claripy.Concat(*inp_chars + [claripy.BVV(bytes(suffix, 'utf-8'))])",
			"project = angr.Project(binary_path, main_opts={'base_addr': base_addr})",
			"# STDIN",
			"state = project.factory.full_init_state(args=[binary_path],stdin=inp,add_options={angr.options.unicorn, angr.options.SYMBOL_FILL_UNCONSTRAINED_MEMORY, angr.options.SYMBOL_FILL_UNCONSTRAINED_REGISTERS})",
			"# ARGUMENTS",
			"# $0state = project.factory.full_init_state(args=[binary_path, inp], add_options={add_options=angr.options.SYMBOL_FILL_UNCONSTRAINED_MEMORY, add_options=angr.options.SYMBOL_FILL_UNCONSTRAINED_REGISTERS})",
			"simgr = project.factory.simulation_manager(state)",
			"for i, k in enumerate(inp_chars):",
			"    if i < len(prefix):",
			"        state.solver.add(k == prefix[i])",
			"    else:",
			"        # must be printable",
			"        # state.solver.add(k < 123)",
			"        # state.solver.add(k > 33)",
			"        state.solver.add(k in printable)",
			"simgr.explore(find=successful, avoid=failed)",
			"if simgr.found:",
			"    print(simgr.found[0].posix.dumps(sys.stdin.fileno()))",
			"else:",
			"    for errored in simgr.errored:",
			"        print(f'ERRORED {errored.posix.dumps(sys.stdin.fileno())}')",
			"    for deadended in simgr.deadended:",
			"        print(f'DEADENDED {deadended.posix.dumps(sys.stdin.fileno())}')"
		]
	}
}
