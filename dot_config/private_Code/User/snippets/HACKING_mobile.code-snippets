{
	"frida hook script": {
		"scope": "python",
		"prefix": "frida hook script",
		"body": [
			"import frida",
			"import sys",
			"",
			"",
			"def on_message(message, data):",
			"    if message[\"type\"] == \"send\":",
			"        print(f\"[*] {message['payload']}\")",
			"    elif message[\"type\"] == \"error\":",
			"        print(f\"[*] {message['description']}\")",
			"    else:",
			"        print(message)",
			"",
			"",
			"if len(sys.argv) != 2:",
			"    print(f\"USAGE: python3 {sys.argv[0]} <jscode-filename>\")",
			"    exit()",
			"",
			"app_name = \"$1\"",
			"jscode_file = sys.argv[1]",
			"jscode = open(jscode_file, \"r\")",
			"",
			"device = frida.get_usb_device()",
			"pid = device.spawn([\"$2\"])",
			"",
			"",
			"session = device.attach(pid)",
			"script = session.create_script(jscode.read())",
			"script.on(\"message\", on_message)",
			"script.load()",
			"device.resume(pid)",
			"sys.stdin.read()"
		]
	},
	"frida perform": {
		"scope": "javascript",
		"prefix": "frida perform",
		"body": ["Java.perform(function () {", "", "});"]
	},
	"frida sslpinning universal bypass": {
		"scope": "javascript",
		"prefix": "frida sslpinning universal bypass",
		"body": [
			"Java.perform(function () {",
			"",
			"    let PlatformClass = Java.use('com.android.org.conscrypt.Platform')",
			"    PlatformClass.checkServerTrusted.overload('javax.net.ssl.X509TrustManager', '[Ljava.security.cert.X509Certificate;', 'java.lang.String', 'com.android.org.conscrypt.ConscryptEngine').implementation = function () {",
			"        // Just don't throw any exception",
			"        console.log('Bypassing SSL pinning');",
			"    }",
			"",
			"    let OkHttpClientBuilderClass = Java.use('okhttp3.OkHttpClient$Builder');",
			"    OkHttpClientBuilderClass.certificatePinner.implementation = function () {",
			"        console.log('Bypassing OkHttp3 sslpinning');",
			"        return this; // essentially do nothing",
			"    }",
			"});"
		]
	},
	"frida hook dynamically on load": {
		"scope": "javascript",
		"prefix": "frida hook dynamically on load",
		"body": [
			"console.log(\"Script loaded successfully\");",
			"",
			"let callbackMap = new Map();",
			"",
			"function hookLoadClass() {",
			"   var clazzClassLoader = Java.use(\"java.lang.ClassLoader\");",
			"   clazzClassLoader.loadClass.overload(",
			"      \"java.lang.String\",",
			"      \"boolean\"",
			"   ).implementation = function (name, resolve) {",
			"      try {",
			"         var result = this.loadClass(name, resolve);",
			"         console.log(\"loaded class: \" + name);",
			"         if (callbackMap.has(name)) {",
			"            // trigger callbacks for this class",
			"            let classLoader = this;",
			"            let clazz = Java.ClassFactory.get(classLoader).use(name);",
			"            let callbacks = callbackMap.get(name);",
			"            if (callbacks !== undefined) {",
			"               for (let callback of callbacks) {",
			"                  callback(clazz);",
			"               }",
			"            }",
			"         }",
			"         return result;",
			"      } catch (e) {",
			"         console.log(\"exception loading class: \" + name);",
			"         throw e;",
			"      } finally {",
			"      }",
			"   };",
			"}",
			"",
			"Java.perform(hookLoadClass);",
			"",
			"function JavaUseOnceLoaded(className, callback) {",
			"   try {",
			"      callback(Java.use(className));",
			"      return;",
			"   } catch (e) {",
			"      if (callbackMap.has(className)) {",
			"         let callbackSet = callbackMap.get(className);",
			"         if (callbackSet !== undefined) callbackSet.add(callback);",
			"      } else {",
			"         let newCallbackSet = new Set();",
			"         newCallbackSet.add(callback);",
			"         callbackMap.set(className, newCallbackSet);",
			"      }",
			"   }",
			"}",
			"",
			"JavaUseOnceLoaded(",
			"   \"$1\",", // class name
			"   (clazz) => {",
			"      console.log(\"dynamic load of class: \" + clazz.\\$className);",
			"",
			"      console.log(\"Listing all dynamic methods loaded:\");",
			"      // THIS LINE IS NEEDED OR STUFF BREAKS!!!",
			"      var methodArr = clazz.class.getDeclaredMethods();",
			"      for (var m in methodArr) {",
			"         console.log(methodArr[m]);",
			"         console.log(\"========================\");",
			"      }",
			"",
			"      functionName = \"$2\"",
			"      clazz[functionName].implementation = function () {",
			"         console.log(functionName + \"is Running...\");",
			"         console.log(\"ARGS: \" + JSON.stringify(arguments));",
			"         let ret = this.decryptMsg.apply(this, arguments);",
			"         console.log(\"RESULT: \" + ret);",
			"         return ret;",
			"      };",
			"   }",
			");",
			""
		]
	}
}
