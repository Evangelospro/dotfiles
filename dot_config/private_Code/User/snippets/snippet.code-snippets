{
    // Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
    // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
    // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
    // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
    // Placeholders with the same ids are connected.
    // Example:
    "angr template":{
        "scope": "python",
        "prefix": "angr temp",
        "body": [
            "import angr",
            "import claripy",
            "import sys",
            "import os",
            "",
            "# from string import printable",
            "printable = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_{}'",
            "binary_path =  './$1'",
            "",
            "def debug(output):",
            "    if len(sys.argv) > 1 and sys.argv[1].lower() == 'debug':",
            "        print(output)",
            "def successful(state):",
            "    output = state.posix.dumps(sys.stdout.fileno())",
            "    debug(output)",
            "    if b'That key is valid.' in output:",
            "        return True",
            "    return False",
            "",
            "def failed(state):",
            "    output = state.posix.dumps(sys.stdout.fileno())",
            "    debug(output)",
            "    if b'That key is invalid.' in output:",
            "        return True",
            "    return False",
            "",
            "def hook(l=None):",
            "    if l:",
            "        locals().update(l)",
            "    import IPython",
            "    IPython.embed(banner1='', confirm_exit=False)",
            "    exit(0)",
            "",
            "base_addr = 0x00000000",
            "target_addr = ['0x00000000']",
            "avoid_addr = ['0x00000000']",
            "# String -> 8 bytes",
            "# Int -> 4 bytes",
            "inp_len = $2",
            "prefix = '$3{'",
            "suffix = '}'",
            "inp_chars = [claripy.BVS('inp_%d' % i, 8) for i in range(inp_len - len(suffix))]",
            "inp = claripy.Concat(*inp_chars + [claripy.BVV(bytes(suffix, 'utf-8'))])",
            "project = angr.Project(binary_path, main_opts={'base_addr': base_addr})",
            "# STDIN",
            "state = project.factory.full_init_state(args=[binary_path],stdin=inp,add_options={angr.options.unicorn, angr.options.SYMBOL_FILL_UNCONSTRAINED_MEMORY, angr.options.SYMBOL_FILL_UNCONSTRAINED_REGISTERS})",
            "# ARGUMENTS",
            "# $0state = project.factory.full_init_state(args=[binary_path, inp], add_options={add_options=angr.options.SYMBOL_FILL_UNCONSTRAINED_MEMORY, add_options=angr.options.SYMBOL_FILL_UNCONSTRAINED_REGISTERS})",
            "simgr = project.factory.simulation_manager(state)",
            "for i, k in enumerate(inp_chars):",
            "    if i < len(prefix):",
            "        state.solver.add(k == prefix[i])",
            "    else:",
            "        # must be printable",
            "        # state.solver.add(k < 123)",
            "        # state.solver.add(k > 33)",
            "        state.solver.add(k in printable)",
            "simgr.explore(find=successful, avoid=failed)",
            "if simgr.found:",
            "    print(simgr.found[0].posix.dumps(sys.stdin.fileno()))",
            "else:",
            "    for errored in simgr.errored:",
            "        print(f'ERRORED {errored.posix.dumps(sys.stdin.fileno())}')",
            "    for deadended in simgr.deadended:",
            "        print(f'DEADENDED {deadended.posix.dumps(sys.stdin.fileno())}')",
        ],
    },
    "web template": {
        "scope": "python",
        "prefix": "web temp",
        "body": [
            "import httpx as requests",
            "",
            "BURP_HOST = 'localhost'",
            "BURP_PORT = 9000",
            "# Check is proxy is working",
            "if requests.get(f'http://{BURP_HOST}:{BURP_PORT}').status_code == 200:",
            "\tproxies = {",
            "\t\t'http://': f'http://{BURP_HOST}:{BURP_PORT}',",
            "\t\t'https://': f'http://{BURP_HOST}:{BURP_PORT}'",
            "\t}",
            "\ts = requests.Client(proxies=proxies, verify=False)",
            "else :",
            "\ts = requests.Client()",
            "",
            ""
        ],
    },
    "pwn template":{
        "scope": "python",
        "prefix": "pwn temp",
        "body": [
            "import os",
            "from pwnscripts import * #pip install pwnscripts",
            "",
            "# Lamda helpers",
            "sl = lambda x: io.sendline(x.encode() if type(x) == str else x)",
            "sla = lambda x, y: io.sendlineafter(x.encode() if type(x) == str else x, y.encode() if type(y) == str else y)",
            "se = lambda x: io.send(x.encode() if type(x) == str else x)",
            "sa = lambda x, y: io.sendafter(x.encode() if type(x) == str else x, y.encode() if type(y) == str else y)",
            "",
            "binary_dir = './$1'",
            "",
            "host = '$2'",
            "port = $3",
            "def pwn_ssh():",
            "    user = input('ssh user:')",
            "    password = input('ssh password: ')",
            "    return ssh(user=user, host=host, port=port, password=password)",
            "",
            "def pwn_remote():",
            "    return remote(host, port)",
            "",
            "def pwn_gdb():",
            "    context.terminal = ['wezterm', '-e']",
            "    gdbscript = '''\ninit-pwndbg\n    continue'''",
            "    return gdb.debug(elf.path, gdbscript)",
            "",
            "def pwn_local():",
            "    return process(elf.path, cwd=binary_dir)",
            "",
            "# Find offset to EIP/RIP for buffer overflows",
            "def find_xip(payload, arch):",
            "    print(f'Finding offset to EIP/RIP for {arch}...')",
            "    # Launch process and send the payload",
            "    io = process(elf.path)",
            "    io.recv()",
            "    io.sendline(payload)",
            "    # Wait for the process to crash",
            "    io.wait()",
            "    # Print out the address of EIP/RIP at the time of crashing",
            "    if 'i386' in arch:",
            "        xip_offset = cyclic_find(io.corefile.pc)  # x86",
            "    elif '64' in arch:",
            "        xip_offset = cyclic_find(io.corefile.read(io.corefile.sp, 4))  # x64",
            "    info('The EIP/RIP offset is ')",
            "    success(str(xip_offset))",
            "    return int(xip_offset)",
            "",
            "def start():",
            "    if args.R:",
            "        return pwn_remote()",
            "    elif args.S:",
            "        return pwn_ssh()",
            "    elif args.L:",
            "        return pwn_local()",
            "    elif args.GDB:",
            "        return pwn_gdb()",
            "    else:",
            "        print('Please select an argument from [REMOTE(R), LOCAL(L), SSH(S), GDB(GDB), ANGR(A)]')",
            "        quit()",
            "padding = find_xip(cyclic(250), elf.get_machine_arch())",
            "io = start()",
            "$0",
            "#io.interactive()",
        ],
    },
    "competitive programming python template": {
        "scope": "python",
        "prefix": "cp temp",
        "body": [
            "import sys",
            "import math",
            "import bisect",
            "import heapq",
            "import time",
            "",
            "from collections import defaultdict, Counter, deque",
            "from itertools import combinations, permutations, product, accumulate",
            "from functools import reduce",
            "",
            "input = sys.stdin.readline",
            "",
            "gi = lambda: int(input())",
            "gis = lambda: list(map(int, input().split()))",
            "gs = lambda: input().rstrip()",
            "gl = lambda: list(input().rstrip())"
            "",
            ""
        ],
        "description": ""
    }
    "if name is main": {
        "scope": "python",
        "prefix": "ifn",
        "body": [
            "if __name__ == '__main__':",
            "\t$0"
        ],
        "description": ""
    },
    "for in": {
        "scope": "python",
        "prefix": "fori",
        "body": [
            "for ${1:item} in ${2:items}:",
            "\t$0"
        ],
        "description": ""
    },
    "for in range": {
        "scope": "python",
        "prefix": "forr",
        "body": [
            "for ${1:i} in range($2):",
            "\t$0"
        ],
        "description": ""
    },
    "lambda": {
        "scope": "python",
        "prefix": "lamb",
        "body": [
            "lambda ${1:arg} : $0",
        ],
        "description": ""
    },
    "map input": {
        "scope": "python",
        "prefix": "mapi",
        "body": [
            "map(${1:func}, input($2).split())"
        ],
        "description": ""
    },
    "html boiler plate": {
        "scope": "html",
        "prefix": "html",
        "body": [
            "<!DOCTYPE html>",
            "<html lang=\"en\">",
            "",
            "<head>",
            "  <meta charset=\"utf-8\">",
            "  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">",
            "",
            "  <title>${1:Basic HTML5}</title>",
            "  <meta name=\"author\" content=\"${2:Pratik Pingale}\">",
            "  <meta name=\"description\" content=\"${3:HTML5 Template}\">",
            "",
            "  <meta property=\"og:title\" content=\"${4:HTML5 Template}\">",
            "  <meta property=\"og:type\" content=\"website\">",
            "  <meta property=\"og:url\" content=\"https://$5\">",
            "  <meta property=\"og:description\" content=\"${6:HTML5 Template}\">",
            "  <meta property=\"og:image\" content=\"${7:./assets/preview.png}\">",
            "",
            "  <link rel=\"icon\" href=\"${8:./assets/favicon.ico}\">",
            "  <link rel=\"icon\" href=\"${9:./assets/favicon.svg}\" type=\"image/svg+xml\">",
            "  <link rel=\"apple-touch-icon\" href=\"${10:./assets/apple-touch-icon.png}\">",
            "",
            "  <link rel=\"stylesheet\" href=\"${11:./css/style.css}\">",
            "",
            "</head>",
            "",
            "<body>",
            "  ${0:<!-- your content here... -->}",
            "  <script src=\"${12:./js/main.js}\" defer></script>",
            "</body>",
            "",
            "</html>",
        ],
        "description": ""
    },
    "css boiler plate": {
        "scope": "css",
        "prefix": "css",
        "body": [
            "html {",
            "  font-family: sans-serif;",
            "  font-size: 100%;",
            "  box-sizing: border-box;",
            "}",
            "",
            "*, ::before, ::after {",
            "  box-sizing: inherit;",
            "}",
            "",
            "html, body {",
            "  margin: 0;",
            "  padding: 0;",
            "  width: 100vw;",
            "  min-height: 100%;",
            "  text-rendering: optimizeLegibility;",
            "}",
            ""
        ]
    },
    "consoleLog": {
        "scope": "javascript",
        "prefix": "clg",
        "body": "console.log(${1:object});",
        "description": "Displays a message in the console"
    },
    "consoleLogObject": {
        "scope": "javascript",
        "prefix": "clo",
        "body": "console.log('${1:object} :>> ', ${1:object});",
        "description": "Displays an object in the console with its name"
    }
}
