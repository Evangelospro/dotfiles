# Modifiers
$MOD = SUPER
$SHIFT_MOD = $MOD_SHIFT

# Exit / Reload
bind={{.keybindings.wm.exit.key }},{{.keybindings.wm.exit.command.linux }}
bind={{.keybindings.wm.reload.key }},exec,{{.keybindings.wm.reload.command.linux }}

# Plugins
# Hyprexpo
#bind = $MOD, grave, hyprexpo:expo toggle
# Pyprland
bind = $MOD , Z, exec, pypr zoom ++0.5
bind = $MOD SHIFT, Z, exec, pypr zoom


# Utilities
bindl={{.keybindings.utilities.lockscreen.key}},exec,{{.keybindings.utilities.lockscreen.command.linux }}
bind={{.keybindings.utilities.launcher.key}},exec,{{.keybindings.utilities.launcher.command.linux}}
bind=,XF86Search,exec,launcher
bind={{.keybindings.utilities.colorpicker.key}},exec,{{.keybindings.utilities.colorpicker.command.linux}}
bind={{.keybindings.utilities.clipboard.key}},exec,{{.keybindings.utilities.clipboard.command.linux}}
bind={{.keybindings.utilities.emoji.key}},exec,{{.keybindings.utilities.emoji.command.linux}}
bind=$MOD,R,exec,dynamic-resize
bind=$MOD,P,exec,project-menu #/usr/bin/wlrlui

# Screenshot / OCR
bind={{.keybindings.screenshot.screenshot.key }},exec,{{.keybindings.screenshot.screenshot.command.linux }}
# Select area to perform OCR on
bind={{.keybindings.screenshot.ocr.key }},exec,{{.keybindings.screenshot.ocr.command.linux }}

# Applications
{{- if .isAsus }}
bind=,XF86Launch4,exec,asusctl led-mode -n
{{- end }}
bind={{ .keybindings.applications.browser.key }},exec,{{ .keybindings.applications.browser.command.linux }}
bind={{ .keybindings.applications.burp.key }},exec,{{ .keybindings.applications.burp.command.linux }}
bind={{ .keybindings.applications.terminal.key }},exec,{{ .keybindings.applications.terminal.command.linux }}
# temporarily disabled as SHIFT_MOD WASD is used for resizing windows
# bind={{.keybindings.applications.discord.key}},exec,{{.keybindings.applications.discord.command.linux}}
# bind={{.keybindings.applications.spotify.key}},exec,{{.keybindings.applications.spotify.command.linux}}
bind={{.keybindings.applications.filemanager.key}},exec,{{.keybindings.applications.filemanager.command.linux}}

# Close / Fullscreen / Kill Applications
bind=ALT_L,F4,killactive
bindr=CTRL_SHIFT,ESCAPE,exec, hyprctl kill # xkill like functionality
bind=$MOD,F,fullscreen,0
bind=$MOD_SHIFT,F,togglefloating


# Function keys
bind=,XF86RFKill,exec,rfkill
binde=,XF86AudioRaiseVolume,exec,volumectl -b up
binde=,XF86AudioLowerVolume,exec,volumectl -b down
bind=,XF86AudioMute,exec,volumectl toggle-mute
bind=,XF86AudioPlay,exec,playerctl play-pause
bind=,XF86AudioNext,exec,playerctl next
bind=,XF86AudioPrev,exec,playerctl previous
binde=,XF86MonBrightnessUp,exec,lightctl up
binde=,XF86MonBrightnessDown,exec,lightctl down

# Scratchpads
# Valent (KDEConnect) special scratchpad workspace
bind=$MOD,K,togglespecialworkspace,backgroundappsvalent
{{- if .isAsus }}
# Rog Control Center special scratchpad workspace
bind=,XF86Launch3,togglespecialworkspace,backgroundappsrogcontrolcenter
{{- end }}

# Rearrange windows in the current workspace
{{- range $entry, $map := .keybindings.wm.movewindows}}
bind={{$map.key}},{{$map.command.linux}}
{{- end }}

# Move Windows Between Workspaces
bind=$MOD,0,workspace, 10
bind=$MOD_SHIFT,0,movetoworkspace, 10
{{- range $i := untilStep 0 10 1 }}
bind=$MOD,{{$i}},workspace, {{$i}}
bind=$MOD_SHIFT,{{$i}},movetoworkspace, {{$i}}
{{- end }}

# Move focus between windows in the current workspace
{{- range $entry, $map := .keybindings.wm.movefocus }}
bind={{$map.key}},{{$map.command.linux}}
{{- end }}

# Resize windows in the current workspace
{{- range $entry, $map := .keybindings.wm.resize }}
binde={{$map.key}},{{$map.command.linux}}
{{- end }}

# Move Windows Between Monitors
bind=$MOD_SHIFT,left,movewindow, mon:l
bind=$MOD_SHIFT,right,movewindow, mon:r

# Cycle between workspaces and windows
bind=ALT,TAB,exec,hyprswitch --daemon --filter-current-monitor --sort-recent --switch-ws-on-hover --hide-special-workspaces=true
# bind=SHIFT_ALT,TAB,exec,hyprswitch --reverse --daemon --filter-current-monitor --sort-recent --switch-ws-on-hover --hide-special-workspaces=true

# Move Windows with Mouse
bindm=$MOD,mouse:272,movewindow

# screen lock when the switch is turning off and then suspend
bindl=,switch:on:Lid Switch,exec,lock-suspend
