# #!/bin/bash

# gradient=(red orange yellow green cyan purple pink)

# # Convert a color to its hex representation
# color_to_rgb() {
#     case $1 in
#         # dracula colors
#         cyan) echo "rgb(8be9fd)";;
#         green) echo "rgb(50fa7b)";;
#         orange) echo "rgb(ffb86c)";;
#         pink) echo "rgb(ff79c6)";;
#         purple) echo "rgb(bd93f9)";;
#         red) echo "rgb(ff5555)";;
#         yellow) echo "rgb(f1fa8c)";;
#     esac
# }

# # Set the border color using hyprctl
# set_border_color() {
#     # echo "Setting border active color to" "${gradient_rgb[@]}"
#     hyprctl keyword general:col.active_border "${gradient_rgb[@]}"
#     # echo "Setting group border color to" "${gradient_rgb[@]}"
#     hyprctl keyword general:col.group_border_active " ${gradient_rgb[@]}"
# }

# # Loop through the colors in the gradient
# while true; do
#     # randomize the gradient color order
#     gradient=( $(shuf -e "${gradient[@]}") )
#     gradient_rgb=( $(for color in "${gradient[@]}"; do color_to_rgb $color; done) )
#     echo "Gradient: ${gradient_rgb[@]}"
#     set_border_color "${gradient_rgb[@]}"
# done


#!/bin/bash

gradient=(red orange yellow green cyan purple pink)

# Convert a color to its hex representation
color_to_hex() {
    case $1 in
        # dracula colors
        cyan) echo "#8be9fd";;
        green) echo "#50fa7b";;
        orange) echo "#ffb86c";;
        pink) echo "#ff79c6";;
        purple) echo "#bd93f9";;
        red) echo "#ff5555";;
        yellow) echo "#f1fa8c";;
    esac
}

# Set the border color using hyprctl
set_border_color() {
    echo "Setting border active color to $1"
    hyprctl keyword general:col.group_border_active "0xff${1:1}"
    echo "Setting group border color to $1"
    hyprctl keyword general:col.group_border "0x88${1:1}"
    echo "Setting active border color to $1"
    hyprctl keyword general:col.active_border "0xff${1:1}"
    echo "Setting inactive border color to $1"
    hyprctl keyword general:col.inactive_border "0x88${1:1}"
}

if [[ $(cat /sys/class/power_supply/BAT1/status) == "Charging" ]]; then
    while true; do   
        for color in "${gradient[@]}"; do
            hex_color=$(color_to_hex $color)
            set_border_color $hex_color
            sleep 0.35
        done
    done
fi
