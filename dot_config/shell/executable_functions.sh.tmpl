function source-all() {
    dir=$1
    if [ -z "$dir" ]; then
        echo "No directory specified"
        return 1
    fi
    # clear $@ so that it doesn't get passed to the files sourced as it will expand to the files in the directory before the file is sourced, essentially hardcoding $@ = dir in the sourced files
    shift
    for file in $dir/*; do
        if [ -d "$file" ]; then
            source-all "$file"
        elif [ -f "$file" ] && [[ $file == *.sh ]]; then
            # echo "Sourcing $file"
            source "$file"
        fi
    done
}

source-safe() { if [ -f "$1" ]; then source "$1"; fi }

source-all "$XDG_CONFIG_HOME/shell/functions"

function set_tab_title() {
    name=$1
    echo -ne "\033]0;$name\007"
}

function chrome() {
    browser=$(\ls /usr/bin | grep -E "chromium|brave|google-chrome|thorium" | head -n 1)
    $browser --enable-logging --v=1
}

function e() {
    $EDITOR "$@"
}

function e.() {
    e .
}

function ssh(){
    if [[ $TERM_PROGRAM == "WezTerm" ]]; then
        # wezterm ssh "$@"
        /usr/bin/ssh "$@"
    else
        /usr/bin/ssh "$@"
    fi
}

# sshp username password host extr_args
function sshp() {
    echo "Using sshpass to ssh into $3 as $1 with password $2 and extra args ${@: 4}"
    sshpass -p $2 ssh -o StrictHostKeyChecking=no $1@$3 ${@: 4};
}

function clear-hosts(){
    echo -ne """# Static table lookup for hostnames.
# See hosts(5) for details.
127.0.0.1 localhost
127.0.0.1 {{.chezmoi.hostname}}

ff02::1 ip6-allnodes
ff02::2 ip6-allrouters
""" | sudo tee /etc/hosts
}

function upload() {
    if [[ -z $1 ]]; then
        echo "No file specified for upload"
        return 1
    fi
    full_path=$(realpath $1)
    curl --silent -F"file=@$full_path" https://0x0.st
}

function mkcd(){
    mkdir -p $1
    cd $1
}

# Move latest Download to current directory
function mvd() {
    local fileName
    # check that the user is not in the Downloads directory already
    if [[ $(pwd) == "$HOME"/Downloads ]]; then
        echo "Already in Downloads directory"
        return 1
    else
        fileName=$(\ls -t $HOME/Downloads | head -n 1)
        # check that the command was completed successfully and has an output
        if [[ $? == 0 && -n $fileName ]]; then
            # Check if file doesn't end with .crdownload ignore casing
            if [[ ${(L)fileName} != *.crdownload ]]; then
                mv $HOME/Downloads/"$fileName" .
            else
                echo $fileName has not finished downloading
            fi
        else
            echo "No files in Downloads"
            return 1
        fi
    fi
}

# Move latest Screenshot to current directory
function mvs() {
    # check that the user is not in the Screenshots directory already
    if [[ $(pwd) == "$HOME"/Pictures/Screenshots ]]; then
        echo "Already in Screenshots directory"
        return 1
    else
        local fileName
        fileName=$(\ls -t $HOME/Pictures/Screenshots | head -n 1)
        # check that the command was completed successfully and has an output
        if [[ $? == 0 && -n $fileName ]]; then
            mv $HOME/Pictures/Screenshots/"$fileName" .
        else
            echo "No files in Screenshots"
            return 1
        fi
    fi
}

function wifi-pass() {
    if [[ -z $1 ]]; then
        echo "No SSID specified"
        return 1
    fi
    sudo grep -r '^psk=' /etc/NetworkManager/system-connections/ | sed 's/\/etc\/NetworkManager\/system-connections\///g' | grep $1
}

function checkContainerRunning() {
    docker container ls -q -f name="$1"
}

# colorized man pages
function man() {
    env \
    LESS_TERMCAP_mb=$(printf "\e[1;31m") \
    LESS_TERMCAP_md=$(printf "\e[1;35m") \
    LESS_TERMCAP_me=$(printf "\e[0m") \
    LESS_TERMCAP_se=$(printf "\e[0m") \
    LESS_TERMCAP_so=$(printf "\e[4;36m") \
    LESS_TERMCAP_ue=$(printf "\e[0m") \
    LESS_TERMCAP_us=$(printf "\e[3;34m") \
    PAGER="${commands[less]:-$PAGER}" \
    _NROFF_U=1 \
    man "$@"
}

# navigation
function up () {
    local d=""
    local limit="$1"

    # Default to limit of 1
    if [ -z "$limit" ] || [ "$limit" -le 0 ]; then
        limit=1
    fi

    for ((i=1;i<=limit;i++)); do
        d="../$d"
    done

    # perform cd. Show error if cd fails
    if ! cd "$d"; then
        echo "Couldn't go up $limit dirs.";
    fi
}

function rm(){
    this_file_system=$(\df -P $HOME | tail -1 | awk '{print $1}')
    flags=()
    targets=()
    for arg in "$@"; do
        if [[ $arg == -* ]]; then
            flags+=("$arg")
        else
            targets+=("$arg")
        fi
    done
    if [[ -z $targets ]]; then
        echo "No targets specified"
        return 1
    fi
    # echo "targets: ${targets[@]}"
    # echo "flags: $flags"
    for target in "${targets[@]}"; do
        target_file_system=$(df -P $target 2>/dev/null | tail -1 | awk '{print $1}')
        if [[ $target_file_system == $this_file_system ]]; then
            trash-put $target
        else
            # if flags is empty, don't pass it to rm
            if [[ -z $flags ]]; then
                output=$(/usr/bin/rm $target 2>&1)
                # echo $output
                if [[ $? != 0 ]]; then
                    if [[ $output == *".git/objects/pack': Directory not empty"* ]]; then
                        echo "git repo detected, killing gitstatusd"
                        pkill -9 gitstatusd-linu
                        /usr/bin/rm $target
                    else
                        echo "Error: $output"
                    fi
                fi
            else
                flags="${flags[@]}"
                output=$(/usr/bin/rm $flags $target 2>&1)
                # echo $output
                if [[ $? != 0 ]]; then
                    if [[ $output == *".git/objects/pack': Directory not empty"* ]]; then
                        echo "git repo detected, killing gitstatusd"
                        pkill -9 gitstatusd-linu
                        /usr/bin/rm $flags $target
                    else
                        echo "Error: $output"
                    fi
                fi
            fi
        fi
    done
}

function restore() {
    trash-restore "$@"
}

function gitfetch() {
    if command -v onefetch &> /dev/null; then
        onefetch
    fi
}

# Adding onefetch to every cd you do with a .git dir
function cd() {
    __zoxide_z "$@"
    if [ -d .git ]; then
        git_base_dir=$(git rev-parse --show-toplevel)
        # check if dirhistory(OMZP modified) is enabled
        if [ -n "$dirhistory_past" ]; then
            # check if this directory was not visited before in this session(does not exist in dirhistory_past)
            if [ -z "$(echo $dirhistory_past | grep -o $git_base_dir)" ]; then
                gitfetch
            fi
        elif [ "$OLDPWD" != "$(basename "$git_base_dir")"]; then
                gitfetch
        fi
    fi
}

function cat() {
    if [ $# -eq 0 ]; then
        /usr/bin/cat
    else
        for file in $@; do
            echo "Previewing $file"
            mimetype=$(file --mime-type -b "$file")
            # allow all images and pdfs to be previewed with the kitty protocol check if it starts with image or pdf
            if [[ $mimetype == image* || $mimetype == application/pdf ]]; then
                if [[ $TERM_PROGRAM == "WezTerm" ]]; then
                    echo "WezTerm preview"
                    wezterm imgcat "$file"
                elif [[ $TERM_PROGRAM == "ghostty" ]]; then
                    echo "Ghostty preview"
                    kitten icat "$file"
                elif [[ $TERM_PROGRAM == "kitty" ]]; then
                    echo "Kitty preview"
                    kitty +kitten icat "$file"
                else
                    echo "File preview not supported in $TERM_PROGRAM"
                fi
            else
                if command -v bat &> /dev/null; then
                    echo "Bat preview"
                    /usr/bin/bat "$file"
                else
                    echo "Cat preview"
                    /usr/bin/cat "$file"
                fi
            fi
        done
    fi
}

# Time shell loading time takes shell and number of times to run
function timeshell() {
    shell=${1-$SHELL}
    times=${2-10}
    echo "Running $shell $times times"
    for ((i=1; i<=$times; i++))
    do
        time SHELL_PROFILE=0 $shell -i -c exit
    done
}

function profileshell() {
    shell=${1-$SHELL}
    echo "Profiling $shell"
    SHELL_PROFILE=1 $shell -i -c exit
}
