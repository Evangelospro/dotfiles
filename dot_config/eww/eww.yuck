;; Variables

(include "variables.yuck")

(include "sidebar.yuck")
(include "notifications.yuck")

;; widgets

(defwidget launcher []
  (box 
    :class "launcher_module"
    :orientation "h"
    (button
        :onclick "launcher &"
        :class "iconlauncher" "")
   ))

(defwidget workspaces []
  (literal 
    :content workspaces)
)

(defwidget appnames []
    (eventbox
        :onhover "${EWW_CMD} update control_reveal=true"
        :onhoverlost "${EWW_CMD} update control_reveal=false"
        (box
            :orientation "h"
            :space-evenly "false"
            :vexpand "false"
            :hexpand "false" 
            (literal 
                :content appname)
            (revealer
            :transition "slideright"
                :reveal control_reveal
                :duration "350ms"
            (box
                :vexpand "false"
                :hexpand "false"
                :orientation "h"
                :space-evenly "false"
                (button
                    :class "app-button"
                    :onclick "hyprctl dispatch togglefloating 1" "") 
                (button
                    :class "app-button"
                    :onclick "hyprctl dispatch fullscreen 1" "")
                (button
                    :class "app-button"
                    :onclick "hyprctl dispatch killactive 1" "")
                )
            )
        )
    )
)

(defwidget bright []
  (eventbox
    :onhover "${EWW_CMD} update brightness_reveal=true" 
    :onhoverlost "${EWW_CMD} update brightness_reveal=false"
    (box 
        :class "module" 
        :space-evenly "false" 
        :orientation "h" 
        :spacing "3" 
	    (revealer 
	        :transition "slideright"
		    :reveal brightness_reveal
			:duration "350ms"
	        (scale    :class "brightbar"
			    :value brightness_percent
			    :orientation "h"
			    :tooltip "${brightness_percent}%"
			    :max 100
			    :min 0
			    :onchange "lightctl set {}%" ))
        (label
            :text ""
            :class "bright_icon"
            :tooltip "brightness"))))

(defwidget volume []
  (eventbox 
    :onhover "${EWW_CMD} update volume_reveal=true"
	:onhoverlost "${EWW_CMD} update volume_reveal=false"
    (box
        :class "module-2"
        :space-evenly "false"
        :orientation "h"
        :spacing "3" 
	        (revealer 
	            :transition "slideright"
			    :reveal volume_reveal
			    :duration "350ms"
	            (scale  
	                :class "volbar"
			        :value volume_percent
			        :orientation "h"
			        :tooltip "${volume_percent}%"
			        :max 100
			        :min 0
			        :onchange "volumectl set {}%" ))
	        (button
	            :onclick "${EWW_CMD} open --toggle audio_ctl"
	            :class "volume_icon"
	            "墳"))))

(defwidget wifi [] 
  (eventbox 
    :onhover "${EWW_CMD} update wifi_reveal=true"
	:onhoverlost "${EWW_CMD} update wifi_reveal=false"
	(box
	    :vexpand "false"
	    :hexpand "false"
	    :space-evenly "false"
	    (revealer 
	        :transition "slideright"
		    :reveal wifi_reveal
			:duration "350ms"
	        (label
	            :class "module_essid"
			    :text ESSID_WLAN
			  ))
		(button
		    :class "module-wifi"
		    :onclick "~/.config/eww/scripts/wifi_menu &"
		    WLAN_ICON))))

(defwidget network-speeds []
(box :orientation "h" :space-evenly false (label :text "${interfaceId}: ${round(EWW_NET[interfaceId].NET_UP / 1000000, 2)}")
    (label :class {round(EWW_NET[interfaceId].NET_UP / 1000000, 2) > 0.1 ?
    round(EWW_NET[interfaceId].NET_UP / 1000000, 2) > 5 ?
    "veryuplink" : "uplink" : "noactive"} :text "  "
    )
    (label :text "${round(EWW_NET[interfaceId].NET_DOWN / 1000000, 2)}")
    (label :class {round(EWW_NET[interfaceId].NET_DOWN / 1000000, 2) > 0.1 ?
    round(EWW_NET[interfaceId].NET_DOWN / 1000000, 2) > 10 ?
    "verydownlink" : "downlink" : "noactive"} :text "  "
    )
)
)




(defwidget bat []
		(box
		    :class "bat_module"
		    :vexpand "false"
		    :hexpand "false" 
            (circular-progress
                :value {battery}
                :class "batbar"
                :thickness 4
                (button 
                    :class "iconbat"
                    :limit-width 2
                    :tooltip "battery on ${battery}%"
                    ; :show_truncated false
                    :onclick "${EWW_CMD} open --toggle system"
                    :wrap false
                    ""))))

(defwidget mem []
		(box :class "mem_module" :vexpand "false" :hexpand "false" 
            (circular-progress 
                :value {EWW_RAM.used_mem_perc}
                :class "membar"
                :thickness 4
            (button 
                :class "iconmem"
                :limit-width 2
                :tooltip "using ${EWW_RAM.used_mem_perc}% ram"
                :onclick "${EWW_CMD} open --toggle system"
                ; :show_truncated false
                :wrap false
                ""))))

(defwidget clock_module []
  (eventbox
      :onhover "${EWW_CMD} update time_reveal=true"
  	:onhoverlost "${EWW_CMD} update time_reveal=false"
      (box
          :class "module"
          :space-evenly "false"
          :orientation "h"
          :spacing "0" 
          (label
              :text clock_time
              :class "clock_time_class" )
          (revealer :transition "slideleft"
  		    :reveal time_reveal
  		    :duration "350ms"
              (button 
                  :class "clock_date_class"
                  :onclick "${EWW_CMD} open --toggle calendar" clock_date)))))

(defwidget notif_button []
  (box
    :class "notif_button"
    :space-evenly "false"
    :orientation "h"
    (button
	    :onclick "if ${EWW_CMD} state | grep 'rightside: false' ; then ${EWW_CMD} update rightside=true ; else ${EWW_CMD} update rightside=false ; fi"
      (label
      :text "")
    )
))

(defwidget powermenu []
  (box
    :class "powermenu"
    :space-evenly "false"
    :orientation "h"
    (button
        ; launch wlogout if it isn't running already
        :onclick "if ! pgrep -x wlogout > /dev/null; then wlogout & else ${EWW_CMD} open --toggle powermenu ; fi"
      (label
      :text "")
    )
))
  
(defwidget sep []
  (box 
    :class "module-2"
    :vexpand "false"
    :hexpand "false"
    (label
        :class "separ"
        :text "|")))

(defwidget gap []
  (box 
    :orientation "h"
    :hexpand "false"
    :visible "true"
    :width 150))


;;define widget groups
(defwidget left []
	(box 
	    :orientation "h" 
		:space-evenly false  
        :halign "start"
		:class "left_modules"
    (launcher)
    (sep)
    (workspaces)))
(defwidget center []
	(box :orientation "h" 
		 :space-evenly false  
         :halign "center"
		 :class "center_modules"
    (appnames)))
(defwidget right []
	(box
	    :orientation "h" 
		:space-evenly false  
        :halign "end"
		:class "right_modules"
    (bright)
    (volume)
    (wifi)
    (network-speeds)
    (sep)
    ; (system-tray)
    (sep)
    (bat)
    (mem)
    (sep)
    (clock_module)
    (notif_button)
    (powermenu)
))

;;Define bar
(defwidget bar_layout []
  (centerbox 
    :class "bar_class"
    :orientation "h"
    (left)
    (center)
    (right)
    ))

(defwindow bar0
    :exclusive true
    :monitor 0
    :geometry (geometry 
        :x "15px"
        :y "9px"
        :width "98%"
        :height "30px"
        :anchor "top center")
    :stacking "fg"
    (bar_layout))

(defwindow bar1
    :exclusive true
    :monitor 1
    :geometry (geometry 
        :x "15px"
        :y "9px"
        :width "98%"
        :height "30px"
        :anchor "top center")
    :stacking "bg"
    (bar_layout))

(defwidget audio []
	(box 
	    :class "audio-box"
	    :orientation "v"
	    :space-evenly "false"
	    :vexpand "false"
	    :hexpand "false"
	    (box 
	        :halign "v"
	        :space-evenly "false"
	        :hexpand "false"
	        :vexpand "false"
	        (box 
	            :class "speaker_icon"
	            :orientation "v")
	        (box 
	            :orientation "v"
	            :halign "center"
	            :vexpand "false"
	            :hexpand "false"
                (label
                    :class "speaker_text"
                    :text "speaker"
                    :valign "center"
                    :halign "left" 
                )
	            (box
	                :class "speaker_bar"
	                :halign "center"
	                :vexpand "false"
	                :hexpand "false"
	                (scale
	                    :value volume_percent
                        :space-evenly "false"
			            :orientation "h"
			            :onchange "amixer -D pulse sset Master {}%" 
                        :tooltip "volume on ${volume_percent}%"
			            :max 100
			            :min 0))))
        (label
            :text "_____________________________________"
            :class "audio_sep"
            :halign "center")
	    (box 
	        :halign "v"
	        :space-evenly "false"
	        :hexpand "false"
	        :vexpand "false"
	        (box 
	            :class "mic_icon"
	            :orientation "v")
	            (box 
	                :orientation "v"
	                :halign "center"
	                :vexpand "false"
	                :hexpand "false"
                    (label
                        :class "mic_text"
                        :text "mic"
                        :valign "center"
                        :halign "left" 
                    )
	                (box 
	                    :class "mic_bar"
	                    :halign "center"
	                    :vexpand "false"
	                    :hexpand "false"
	                    (scale
	                        :value mic_percent
                            :space-evenly "false"
			                :orientation "h"
                            :tooltip "mic on ${mic_percent}%"
			                :onchange "amixer -D pulse sset Capture {}%" 
			                :max 100
			                :min 0))))))
(defwindow audio_ctl
    :stacking "fg"
    :focusable "false"
    :screen 1
    :monitor 0
	:geometry (geometry 
        :x "20" 
		:y "7%" 
        :anchor "top right"
		:width "280px" 
		:height "60px")
    (audio))


;;Define System widget  
(defwidget system []
  (box 
    :class "sys_win"
    :orientation "v"
    :space-evenly "false"
    :hexpand "false"
    :vexpand "false"
    :spacing 0
    (box 
        :class "sys_bat_box"
        :orientation "h"
        :space-evenly "false"
        (circular-progress
            :value {battery}
            :class "sys_bat"
            :thickness 9
            (label :text ""
                :class "sys_icon_bat"
                :limit-width 2
                ; :show_truncated false
                :wrap false))
        (box 
            :orientation "v" 
            :space-evenly "false" 
            :spacing 0 
            :hexpand "false"
            :vexpand "false"
            (label
                :text "battery"
                :halign "start"
                :class "sys_text_bat"
                :limit-width 9
                ; :show_truncated false
                :wrap false)
            (label 
                :text "${battery}%"
                :halign "start"
                :class "sys_text_bat_sub"
                :limit-width 22
                ; :show_truncated false
                :wrap false)
            (label
               :text "${battery_status}"
               :halign "start"
               :class "sys_text_bat_sub"
               :limit-width 22
               ; :show_truncated false
               :wrap false)
        )
        )
    (label
        :text "____________________________________"
        :class "sys_sep"
        :halign "center")
    (box 
        :class "sys_mem_box"
        :orientation "h"
        :space-evenly "false"
        :halign "start"
        (circular-progress
            :value {EWW_RAM.used_mem_perc}
            :class "sys_mem"
            :thickness 9
            (label
                :text ""
                :class "sys_icon_mem"
                :limit-width 2
                ; :show_truncated false
                :wrap false
                :angle 0.0))
        (box
            :orientation "v"
            :space-evenly "false"
            :spacing 0
            :hexpand "false"
            :vexpand "false"
            (label
                :text "memory"
                :halign "start"
                :class "sys_text_mem"
                :limit-width 9
                ; :show_truncated false
                :wrap false)
            (label
                :text "${round((EWW_RAM.available_mem / 1024), 0)} | ${round((EWW_RAM.total_mem / 1024), 0)}mb "
                :halign "start"
                :class "sys_text_mem_sub"
                :limit-width 22
                ; :show_truncated false
                :wrap false)
            (label 
                :text "${round((EWW_RAM.used_mem / 1024), 0)}mb free"
                :halign "start"
                :class "sys_text_mem_sub"
                :limit-width 22
                :wrap false)
            ))))
(defwindow system
    :stacking "fg"
    :focusable "false"
    :screen 1
    :monitor 0
	:geometry (geometry
            :x "20" 
			:y "7%" 
            :anchor "top right"
			:width "290px"
			:height "120px")
    (system))



;;Calendar Widget
(defwidget cal []
	(box 
	    :class "cal"
	    :orientation "v"
	    (box
	        :class "cal-in"
	        (calendar
			  :day calendar_day 
			  :year calendar_year))))
(defwindow calendar
    :stacking "fg"
    :focusable "false"
    :screen 1
    :monitor 0
	:geometry (geometry
        :x "20" 
	    :y "7%" 
        :anchor "top right"
	    :width "270px" 
	    :height "60px")
(cal))
