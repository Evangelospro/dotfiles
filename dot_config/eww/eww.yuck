(include "yuck/windows.yuck")
(include "yuck/variables.yuck")

(defwidget launcher []
  (box
    :class "launcher_module"
    :orientation "h"
    (button
      :onclick "launcher"
    "")
  )
)

(defwidget rogcontrol []
  (image
    :class "rogcontrol"
    :orientation "h"
    :path "${EWW_CONFIG_DIR}/images/rogcontrol.svg"
    (button
      :onclick "rog-control-center &"
    )
  )
)

(defwidget workspaces [?monitor]
  (eventbox :onscroll "echo {{}} | sed -e 's/up/-1/g' -e 's/down/+1/g' | xargs hyprctl dispatch split-workspace"
    (box
      :orientation "h"
      :spacing 3
      :space-evenly "false"
      :valign "center"
      (for workspace in {monitor == 0 ? workspaces0_json : workspaces1_json}
        (box
            (button
                :class "${workspace["status"]}"
                :onclick "hyprctl dispatch split-workspace ${workspace["num"]}"
                :tooltip "workspace ${workspace["num"]}"
                (box
                    :orientation "v"
                    :space-evenly "false"
                    :valign "center"
                    :class "workspaces"
                    (label
                    :class "workspace-num"
                    :tooltip "Workspace ${workspace["num"]}"
                    :text "${workspace["num"]}"
                    )
                    (box
                    :orientation "h"
                    :space-evenly "false"
                    :valign "center"
                    :class "workspace-icons-left"
                    (for icon in "${workspace["icons"][0]}"
                        (image
                        :image-width "20"
                        :image-height "20"
                        :path "${icon}"
                        )
                    )
                    )
                    (box
                    :orientation "h"
                    :space-evenly "false"
                    :valign "center"
                    :class "workspace-icons-right"
                    (for icon in "${workspace["icons"][1]}"
                        (image
                        :image-width "20"
                        :path "${icon}"
                        )
                    )
                )
            )
            )
        (sep)
        )
      )
    )
  )
)

(defwidget appnames [?monitor]
  (box
    :orientation "v"
    :space-evenly false
    (box
      :class {music_status == "No players found" ? "appnames-no-music" : "appnames-music"}
      (eventbox
        ; :onhover "${EWW_CMD} update control_reveal=true"
        ; :onhoverlost "${EWW_CMD} update control_reveal=false"
        (box
          :orientation "h"
          :space-evenly false
          (image
            :class "app-icon"
            :image-width "24"
            :image-height "24"
            :path {monitor == 0 ? appname0_json["icon"] : appname1_json["icon"]}
          )
          (label
            :class {monitor == 0 ? "app-name0" : "app-name1"}
            ; :xalign 0.5
            :limit-width {monitor == 0 ? "40" : "35"}
            :show-truncated true
            :text {monitor == 0 ? appname0_json["title"] : appname1_json["title"]}
          )
          ; (revealer
            ;   :transition "slideright"
            ;   :reveal control_reveal
            ;   :duration "350ms"
            ;   (box
              ;     :vexpand "false"
              ;     :hexpand "false"
              ;     :orientation "h"
              ;     :space-evenly "false"
              ;     (button
                ;       :class "app-controls"
                ;       :onclick "hyprctl dispatch togglefloating 1"
                ;       :tooltip "toggle floating"
              ;     "")
              ;     (button
                ;       :class "app-controls"
                ;       :onclick "hyprctl dispatch fullscreen 1"
                ;       :tooltip "toggle fullscreen"
              ;     "")
              ;     (button
                ;       :class "app-controls"
                ;       :onclick "kill -9 $(hyprctl activewindow | grep 'pid: ' | awk '{print $2}');"
                ;       :tooltip "kill app"
              ;     "")
            ;   )
          ; )
        )
      )
    )
    (box
      :class "music"
      :visible {music_status == "No players found" ? "false" : "true"}
      (eventbox
        :onhover "${EWW_CMD} update music_reveal=true"
        :onhoverlost "${EWW_CMD} update music_reveal=false"
        (box
          :orientation "h"
          :space-evenly "false"
          (box
            :orientation "v"
            :class "music-lyrics"
            (for lyric in {music_status == "No players found" ? "[1]" : lyrics_json }
              (label
                :class "music-lyric"
                ; :css ".music-lyric { margin: 50px 0px 0px 0px; }"
                :limit-width {monitor == 0 ? "45" : "40"}
                ; :xalign 0.5
                :justify "center"
                :text "${lyric}"
              )
            )
          )
          (revealer
            :transition "slideright"
            :reveal music_reveal
            :duration "350ms"
            (box
              :orientation "h"
              :space-evenly "false"
              :halign "end"
              (button
                :class "music-controls-previous"
                :onclick "playerctl --player=spotify previous"
                :tooltip "previous"
              "")
              (button
                :class "music-controls-play"
                :onclick "playerctl --player=spotify play-pause"
                :tooltip "start/stop"
              {music_status == "Playing" ? "" : ""})
              (button
                :class "music-controls-next"
                :onclick "playerctl --player=spotify next"
                :tooltip "next"
              "")
            )
          )
        )
      )
    )
  )
)

(defwidget bat [?monitor]
  (box
    :class "bat_module"
    :vexpand "false"
    :hexpand "false"
    (circular-progress
      :value battery
      :class "batbar"
      :thickness 4
      (button
        :class "iconbat"
        :tooltip "battery on ${battery}%"
        :onclick {monitor == 0 ? "${EWW_CMD} open --toggle system0" : "${EWW_CMD} open --toggle system1"}
      ""))))

(defwidget mem [?monitor]
  (box :class "mem_module"
    :vexpand "false"
    :hexpand "false"
    (circular-progress
      :value {EWW_RAM.used_mem_perc}
      :class "membar"
      :thickness 4
      (button
        :class "iconmem"
        :tooltip "using ${EWW_RAM.used_mem_perc}% ram"
        :onclick {monitor == 0 ? "${EWW_CMD} open --toggle system0" : "${EWW_CMD} open --toggle system1"}
      ""))))

(defwidget clock_module [?monitor]
  (eventbox
    (box
      :space-evenly "false"
      :orientation "h"
      :spacing "0"
      (label
        :text clock_time
        :class {monitor == 0 ? "clock_time_class0" : "clock_time_class1"}
      )
    )
  )
)

(defwidget powermenu [?monitor]
  (button
    :class "powermenu-icon"
    :onclick "pidof wlogout || wlogout -p layer-shell 2>/dev/null &"
  "襤")
)

(defwidget sep []
  (box
    :class "module-2"
    :vexpand "false"
    :hexpand "false"
    (label
      :class "separ"
    :text "|")))

(defwidget gap []
  (box
    :orientation "h"
    :hexpand "false"
    :visible "true"
  :width 125))


(defwidget tray-widget []
  (systray
    ; :active-only false
    :pack-direction "ltr"
  )
)

; (deflisten tray-json "scripts/tray/host.py")

; (defwidget tray-widget []
  ;   (box
    ;     :orientation "h"
    ;     :space-evenly true
    ;         (for entry in tray-json
      ;               (button :onclick {entry.menu_cmd + " &"}
        ;                       :onrightclick {entry.cmd + " &"}
        ;                       (image :image-height 20
        ;                              :path {entry.IconPath})))))

(defwidget left [?monitor]
  (box
    :orientation "h"
    :space-evenly false
    :halign "start"
    :hexpand "true"
    :class "left_modules"
    (launcher)
    ; (rogcontrol)
    (sep)
    (workspaces :monitor {monitor})
  )
)

(defwidget center [?monitor]
  (box :orientation "h"
    :space-evenly false
    :halign "center"
    :class "center_modules"
    (appnames :monitor {monitor}))
)

(defwidget right [?monitor]
  (box
    :orientation "h"
    :space-evenly false
    :halign "end"
    :class "right_modules"
    (sep)
    (indicators)
    (tray-widget)
    (sep)
    (bat :monitor {monitor})
    (mem :monitor {monitor})
    (sep)
    (clock_module :monitor {monitor})
    (sep)
    (notification-button :monitor {monitor})
    (powermenu)
  ))

(defwidget bar_layout [?monitor]
  (centerbox
    :class "bar_class"
    :orientation "h"
    :hexpand "false"
    :vexpand "false"
    (transform
      :scale-x  {monitor == 0 ? "100%" : "100%"}
      :translate-x {monitor == 0 ? "0%" : "0%"}
      (left :monitor {monitor})
    )
    (transform
      :scale-x  {monitor == 0 ? "100%" : "100%"}
      :translate-x {monitor == 0 ? "0%" : "0%"}
      (center :monitor {monitor})
    )
    (transform
      :scale-x  {monitor == 0 ? "100%" : "100%"}
      :translate-x {monitor == 0 ? "0%" : "0%"}
      (right :monitor {monitor})
    )
  )
)

(defwidget indicators []
  (box
    :orientation "h"
    :spacing 3
    :space-evenly "false"
    :valign "center"
    :class "indicators"
    (label
    :text "${indicators_json["layout"]}")
    (image
    :path "${EWW_CONFIG_DIR}/images/capslock-${indicators_json["caps_lock"]}.svg")
    (image
    :path "${EWW_CONFIG_DIR}/images/numlock-${indicators_json["num_lock"]}.svg")
    (button
      :onclick "${indicators_json["caffeine_command"]}"
      (image
        :class "caffeine-icon"
        :tooltip "Caffeine"
        :image-height 22
        :image-width 22
        :path "${EWW_CONFIG_DIR}/images/caffeine-${indicators_json["caffeine_state"]}.svg"
      )
    )
  )
)

(defwidget notification-button [?monitor]
  (button
    :class {monitor == 0 ? "notification-button0" : "notification-button1"}
    :tooltip "${notificationNum} Notifications}"
    :onclick "/home/BallowTK/.config/swaync/pop &"
    :onrightclick "swaync-client -d"
    "${notificationIcon}${notificationNum} "
  )
)

(defwidget system []
  (box
    :class "sys_win"
    :orientation "v"
    :space-evenly "false"
    :hexpand "false"
    :vexpand "false"
    (box
      :class "sys_bat_box"
      :orientation "h"
      :space-evenly "false"
      (circular-progress
        :value {battery}
        :class "sys_bat"
        :thickness 9
        (label :text ""
          :class "sys_icon_bat"
          :limit-width 2
          ; :show_truncated false
        :wrap false))
      (box
        :orientation "v"
        :space-evenly "false"
        :spacing 0
        :hexpand "false"
        :vexpand "false"
        (label
          :text "battery"
          :halign "start"
          :class "sys_text_bat"
          :limit-width 9
          ; :show_truncated false
        :wrap false)
        (label
          :text "${battery}%"
          :halign "start"
          :class "sys_text_bat_sub"
          :limit-width 22
          ; :show_truncated false
        :wrap false)
        (label
          :text "${battery_status}"
          :halign "start"
          :class "sys_text_bat_sub"
          :limit-width 22
          ; :show_truncated false
        :wrap false)
      )
    )
    (label
      :text "____________________________________"
      :class "sys_sep"
    :halign "center")
    (box
      :class "sys_mem_box"
      :orientation "h"
      :space-evenly "false"
      :halign "start"
      (circular-progress
        :value {EWW_RAM.used_mem_perc}
        :class "sys_mem"
        :thickness 9
        (label
          :text ""
          :class "sys_icon_mem"
          :limit-width 2
          ; :show_truncated false
          :wrap false
        :angle 0.0))
      (box
        :orientation "v"
        :space-evenly "false"
        :spacing 0
        :hexpand "false"
        :vexpand "false"
        (label
          :text "memory"
          :halign "start"
          :class "sys_text_mem"
          :limit-width 9
          ; :show_truncated false
        :wrap false)
        (label
          :text "${round((EWW_RAM.used_mem / 1024 / 1024), 0)} | ${round((EWW_RAM.total_mem / 1024 / 1024), 0)} MB "
          :halign "start"
          :class "sys_text_mem_sub"
          :limit-width 22
          ; :show_truncated false
        :wrap false)
        (label
          :text "${round(((EWW_RAM.total_mem - EWW_RAM.used_mem) / 1024 / 1024), 0)} MB free"
          :halign "start"
          :class "sys_text_mem_sub"
          :limit-width 22
        :wrap false)
      )
    )
  )
)
