#!/usr/bin/env python3

# Author: https://github.com/Evangelospro

#!/usr/bin/env python3

import subprocess
import os
import requests
from urllib.parse import quote
import json
from math import floor
import sys

Control = "spotify"

# saves covers here
Cover = "/tmp/cover.png"
# if cover not found in metadata use this instead
bkpCover = os.path.expanduser("~/.config/eww/music.png")

########################## Title ##########################
def title():
	result = subprocess.run(["playerctl", f"--player={Control}", "metadata", "--format", "{{title}}"], capture_output=True, text=True)
	output = result.stdout.strip()
	if not output:
		output = "Play Something"
	return output

########################## Artist ##########################
def artist():
	result = subprocess.run(["playerctl", f"--player={Control}", "metadata", "--format", "{{artist}}"], capture_output=True, text=True)
	output = result.stdout.strip()
	if not output:
		output = "Artist"
	return output

########################## Album ##########################
def album():
	result =subprocess.run(["playerctl", f"--player={Control}", "metadata", "--format", "{{album}}"], capture_output=True, text=True)
	output = result.stdout.strip()
	if not output:
		output = "Album"
	return output

########################## Status ##########################
def status():
	result = subprocess.run(["playerctl", f"--player={Control}", "status"], capture_output=True, text=True)
	output = result.stdout.strip()
	if output:
		return output

########################## Time ##########################
def position_min():
	result = subprocess.run(["playerctl", f"--player={Control}", "position", "--format", "{{ duration(position) }}"], capture_output=True, text=True)
	output = result.stdout.strip()
	if not output:
		output = "00:00"
	return output

def position_ms():
	result = subprocess.run(["playerctl", f"--player={Control}", "position", "--format", "{{ position }}"], capture_output=True, text=True)
	output = result.stdout.strip()
	if not output:
		output = "00:00"
	return int(int(output) / 1000)

########################## Length ##########################
def length_min():
	result = subprocess.run(["playerctl", f"--player={Control}", "metadata", "--format", "{{ duration(mpris:length) }}"], capture_output=True, text=True)
	output = result.stdout.strip()
	if not output:
		output = "00:00"
	return output

def length_ms():
	result = subprocess.run(["playerctl", f"--player={Control}", "metadata", "--format", "{{ mpris:length }}"], capture_output=True, text=True)
	output = result.stdout.strip()
	if not output:
		output = "00:00"
	return output

########################## trackNumber ##########################
def trackNumber():
	result = subprocess.run(["playerctl", f"--player={Control}", "metadata", "xesam:trackNumber"], capture_output=True, text=True)
	output = result.stdout.strip()
	if not output:
		output = "No Track Number"
	return output

########################## trackID ##############################
def trackID():
	result = subprocess.run(["playerctl", f"--player={Control}", "metadata", "mpris:trackid"], capture_output=True, text=True)
	output = result.stdout.strip()
	if output:
		return output.replace("/com/spotify/track/", "")
	return "No Track ID"

########################## Cover ###############################
def cover():
	albumArtUrl = subprocess.run(["playerctl", f"--player={Control}", "metadata", "--format", "{{mpris:artUrl}}"], capture_output=True, text=True).stdout.strip()
	if albumArtUrl:
		albumArtUrl = albumArtUrl.replace("open.spotify.com", "i.scdn.co")
		response = requests.get(albumArtUrl)
		if response.status_code == 200:
			with open(Cover, "wb") as f:
				f.write(response.content)
		else:
			os.copy(bkpCover, Cover)

########################## Statusicon ##########################
def statusicon():
	if status() == "Playing":
		icon=""
	elif status() == "Paused":
		icon=""
	else:
		icon=""
	print(icon, flush=True)


########################## Lyrics ##########################
def lyrics(numOfLines):
	RANGE = 300
	API = "https://spotify-lyric-api.herokuapp.com"
	while True:
		ACTIVE = status() == "Playing"
		if ACTIVE:
			trackid = trackID()
			if trackid == "No Track ID":
				print(json.dumps(["No Lyrics: trackID not found"]), flush=True)
			lyrics = requests.get(f"{API}/?trackid={trackid}").json()
			if lyrics["error"] == False:
				prevIndex = 0
				PLAYING = True
				while PLAYING:
					currTimems = position_ms()
					for i, lyric in enumerate(lyrics["lines"]):
						if abs(currTimems - int(lyric["startTimeMs"])) < RANGE:
							if i == len(lyrics["lines"]) - 1:
								PLAYING = False
							break
					# turn the lines into a json list for eww
					results = json.dumps([lyric["words"] for lyric in lyrics["lines"][i:i+numOfLines]])
					if (i != prevIndex or prevIndex == 0) and results != json.dumps([""]):
						prevIndex = i
						print(results, flush=True)
			else:
				print(json.dumps(["No Lyrics: API Error"]), flush=True)

########################## Main Function ##########################
def main():
	command = sys.argv[1]
	# switch case in python
	match command:
		case "title":
			print(title())
		case "artist":
			print(artist())
		case "album":
			print(album())
		case "status":
			while True:
				print(status())
		case "position_min":
			print(position_min())
		case "position_ms":
			print(position_ms())
		case "length_min":
			print(length_min())
		case "length_ms":
			print(length_ms())
		case "trackNumber":
			print(trackNumber())
		case "trackID":
			print(trackID())
		case "cover":
			print(cover())
		case "statusicon":
			while True:
				statusicon()
		case "lyrics":
			numOfLines = sys.argv[2] if len(sys.argv) > 2 else 5
			lyrics(int(numOfLines))

if __name__ == "__main__":
	main()

