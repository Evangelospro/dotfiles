#!/bin/zsh

# ╔╦╗ ╦ ╦ ╔═╗ ╦ ╔═╗
# ║║║ ║ ║ ╚═╗ ║ ║  
# ╩ ╩ ╚═╝ ╚═╝ ╩ ╚═╝

# author	Niraj
# github	niraj998

# ┌─┐┌─┐┌┐┌┌─┐┬┌─┐┬ ┬┬─┐┌─┐┌┬┐┬┌─┐┌┐┌┌─┐
# │  │ ││││├┤ ││ ┬│ │├┬┘├─┤ │ ││ ││││└─┐
# └─┘└─┘┘└┘└  ┴└─┘└─┘┴└─┴ ┴ ┴ ┴└─┘┘└┘└─┘

# uncomment your music players below.
# 

# Control="MPD"
[ -n "$(pgrep spotify)" ] && Control="spotify"
# [ -n "$(pgrep brave-bin)" ] && Control="brave-bin"
# [ -n "$(pgrep rhythmbox)" ] && Control="rhythmbox"
# [ -n "$(pgrep audacious)" ] && Control="audacious"
# [ -n "$(pgrep clementine)" ] && Control="clementine"
# [ -n "$(pgrep strawberry)" ] && Control="strawberry"



# saves covers here
Cover=/tmp/cover.png
# if cover not found in metadata use this instead
bkpCover=~/.config/eww/music.png
# mpd music directory
mpddir="$HOME/Music/"

# ┌─┐┬  ┌─┐┬ ┬┌─┐┬─┐┌─┐┌┬┐┬    ┌─┐┌─┐┬─┐┬┌─┐┌┬┐┌─┐
# ├─┘│  ├─┤└┬┘├┤ ├┬┘│   │ │    └─┐│  ├┬┘│├─┘ │ └─┐
# ┴  ┴─┘┴ ┴ ┴ └─┘┴└─└─┘ ┴ ┴─┘  └─┘└─┘┴└─┴┴   ┴ └─┘

########################## Title ##########################
title() {
title=$(playerctl --player=$Control metadata --format {{title}})
[ -z "$title" ] && title="Play Something"
echo "$title"
}

########################## Artist ##########################
artist() {
artist=$(playerctl --player=$Control metadata --format {{artist}})
[ -z "$artist" ] && artist="Artist"
echo "$artist"
}

########################## Album ##########################
album() {
album=$(playerctl --player=$Control metadata --format {{album}})
[ -z "$album" ] && album="Album"
echo "$album"
}

########################## Status ##########################
status() {
status=$(playerctl --player=$Control status)
[ -z "$status" ] && status="Stopped"
echo "$status"
}

########################## Time ##########################
ctime() {
time=$(playerctl --player=$Control position --format "{{ duration(position) }}")
[ -z "$time" ] && time="0:00"
echo "$time"
}

########################## Time ##########################
time_ms() {
# return time in milliseconds
postime=$(playerctl --player=$Control position)
timems=$((echo "$postime * 1000" | bc))
echo $timems
}

########################## Length ##########################
length() {
length=$(playerctl --player=$Control metadata --format "{{ duration(mpris:length) }}")
[ -z "$length" ] && length="0:00"
echo "$length"
}

########################## trackNumber ##########################
playlist() {
playlist=$(playerctl --player=$Control metadata xesam:trackNumber)
[ -z "$playlist" ] && playlist='"No playlist"'
echo "$playlist"
}

########################## Cover ##########################
cover() {
albumart="$(playerctl --player=$Control metadata mpris:artUrl | sed -e 's/open.spotify.com/i.scdn.co/g')"
[ $(playerctl --player=$Control metadata mpris:artUrl) ] && curl -s "$albumart" --output $Cover || cp $bkpCover $Cover 
echo "$Cover"
}

########################## Statusicon ##########################
statusicon() {
icon=""
[ $(playerctl --player=$Control status) = "Playing" ] && icon=""
[ $(playerctl --player=$Control status) = "Paused" ] && icon=""
echo "$icon"
}

########################## Lyrics ##########################
lyrics() {
TrackID=$(playerctl --player=$Control metadata --format {{mpris:trackid}} | sed -e 's/\/com\/spotify\/track\///g')
if [ -n "$TrackID" ]; then
	# echo "$TrackID"
	# very hacky but it works
	numOfLyricsToDisplay=$(($1-2))
	data=$( curl -s --get "https://spotify-lyric-api.herokuapp.com/?trackid=$TrackID")
	# check if it DOES NOT contain an "error" key
	if [ "$(echo $data | jaq -r '.error')" != "true" ]; then
		# echo "No errors"
		lyrics=$( echo $data | jaq -r '.lines[] | .startTimeMs, .words' )
		if [ -n "$lyrics" ]; then
			# echo "$lyrics"
			# ok so the output is json display the current lyric(and next 4) based on the time
			postime=$(playerctl --player=$Control position)
			timems=$(echo "$postime * 1000" | bc | sed -e 's/\..*$//g')
			# echo "$timems"
			# find the line number of the lyric with the time closest to the current time
			# first line is the time, second line is the lyric
			# break the loop when the time is greater than the current time
			# process the lyrics and make it into two arrays one for time and one for lyrics

			lyrTime=()
			lyrLines=()
			while IFS= read -r line; do
				lyrTime+=("$line")
				IFS= read -r line
				lyrLines+=("$line")
			done < <(echo "$lyrics")

			# echo "${time[@]}"
			# echo "${lyr[@]}"

			# display the current lyric and the next 4
			result=""
			delay=100
			for (( i = 0; i < ${#lyrTime[@]}; i++ )); do
				# echo "${lyrTime[$i]}"
				if [ "${lyrTime[$i]}" -gt "$timems" ]; then
					# for loop to display the next "num" lyrics
					result=""
					for j in {-1..$numOfLyricsToDisplay}; do
						# echo "${lyrLines[$i+$j]}"
						result="$result${lyrLines[$i+$j]}\n"
					done
					break
				fi
			done
			echo "$result"
		else
			echo "LYRICS: No Lyrics"
		fi
	else
		echo "LYRICS: API errors"
	fi
else
	echo "LYRICS: No TrackID"
fi
}

# ┌┬┐┌─┐┌┬┐  ┌─┐┌─┐┬─┐┬┌─┐┌┬┐┌─┐
# │││├─┘ ││  └─┐│  ├┬┘│├─┘ │ └─┐
# ┴ ┴┴  ─┴┘  └─┘└─┘┴└─┴┴   ┴ └─┘

########################## Title ##########################
mpctitle() {
title=$(mpc -f %title% current)
[ -z "$title" ] && title="Play Something"
echo "$title"
}

########################## Artist ##########################
mpcartist() {
artist=$(mpc -f %artist% current)
[ -z "$artist" ] && artist="Artist"
echo "$artist"
}

########################## Album ##########################
mpcalbum() {
album=$(mpc -f %album% current)
[ -z "$album" ] && album="Album" 
echo "$album"
}

########################## Cover ##########################
mpccover() {
ffmpeg -i "$mpddir"/"$(mpc current -f %file%)" "${Cover}" -y || cp $bkpCover $Cover
echo "$Cover" && exit
}

########################## Time ##########################
mpctime() {
time=$(mpc status %currenttime%)
[ -z "$time" ] && time="0:00"
echo "$time"
}

########################## Length ##########################
mpclength() {
length=$(mpc status %totaltime%)
[ -z "$length" ] && length="0:00" 
echo "$length"
}

########################## Icon ##########################
mpcicon() {
status=$(mpc status | head -2 | tail -1 | cut -c2-7 )
icon=""
[ "$status" = "playin" ] && icon=""
[ "$status" = "paused" ] && icon=""
echo "$icon"
}

########################## Status ##########################
mpcstatus() {
stat=$(mpc status | head -2 | tail -1 | cut -c2-7 )
status="Stopped"
[ "$stat" = "playin" ] && status="Playing"
[ "$stat" = "paused" ] && status="Paused"
echo "$status"
}

########################## Percent ##########################
mpcperc() {
perc=$(mpc status %percenttime%)
[ -z "$perc" ] && perc="0" 
echo "$perc"
}

########################## Playlist ##########################
mpcsongpos() {
pos=$(mpc status %songpos%)
allsongs=$(mpc status %length%)
playlist="$pos/$allsongs"
[ -z "$pos" ] && playlist="0/0"
echo "$playlist"
}

########################## Lyrics ##########################
mpclyrics() {
Title=$(mpc -f %title% current)
Artist=$(mpc -f %artist% current)
URL="https://api.lyrics.ovh/v1/$Artist/$Title"
lyrics=$(curl -s "$( echo "$URL" | sed s/" "/%20/g | sed s/"&"/%26/g | sed s/,/%2C/g | sed s/-/%2D/g)" | jq '.lyrics' )
[ "$lyrics" = "null" ] && lyrics=$( curl -s --get "https://makeitpersonal.co/lyrics" --data-urlencode "artist=$Artist" --data-urlencode "title=$Title")
printf "$lyrics" | less
}

# ┬ ┬┌─┐┬  ┌─┐
# ├─┤├┤ │  ├─┘
# ┴ ┴└─┘┴─┘┴  

doc() {
echo "Usage:
  music [Options]

Options:
  previous	previous song
  next		next song
  toggle	toggle between play-pause song
  title		shows title of current song
  album		shows album of current song
  artist	shows artist of current song
  status	music status (playing/paused/stopped)
  statusicon	music status icons (playing/paused/stopped)
  coverloc	saves cover and shows location to cover of current song
  showcover	opens cover using feh
  time		shows current time of song
  length	shows length of song
  percent	shows percent song
  playlist	shows playlist position of current song
  lyrics	shows lyrics"
}

# ┌─┐┌─┐┌┬┐┬┌─┐┌┐┌┌─┐
# │ │├─┘ │ ││ ││││└─┐
# └─┘┴   ┴ ┴└─┘┘└┘└─┘

case $Control in
	MPD)
	case $1 in 
		next)		mpc -q next		;;
		previous)	mpc -q prev		;;
		toggle)		mpc -q toggle		;;
		title)		mpctitle		;;
		artist)		mpcartist		;;
		album)		mpcalbum		;;
		status)		mpcstatus		;;
		statusicon)	mpcicon			;;
		player)		echo "$Control"		;;
		coverloc)	mpccover		;;
		showcover)	mpccover | xargs feh	;;
		time)		mpctime			;;
		length)		mpclength		;;
		percent)	mpcperc			;;
		playlist)	mpcsongpos		;;
		lyrics)		mpclyrics		;;
		*)		doc			;;
	esac
	;;
	*)
	case $1 in 
		next)		playerctl --player=$Control next	;;
		previous)	playerctl --player=$Control previous	;;
		toggle)		playerctl --player=$Control play-pause	;;
		title)		title					;;
		artist)		artist					;;
		album)		album					;;
		status)		status					;;
		statusicon)	statusicon				;;
		player)		echo "$Control"			;;
		coverloc)	cover					;;
		showcover)	cover | xargs feh 	 	;;
		ctime)		ctime 					;;
		time)		time_ms 				;;
		length)		length 					;;
		percent)	echo "0"				;;
		playlist)	playlist				;;
		lyrics)		lyrics $2			    ;;
		*)		doc					        ;;
	esac
esac 2>/dev/null
