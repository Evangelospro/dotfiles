#!/usr/bin/env python3

import subprocess
import re
import json
import os
import sys
import hyprland


class Workspacer(hyprland.Events):
    def __init__(self):
        # Initialize hyprland
        self.i = hyprland.info.Info()
        self.c = hyprland.Config()
        super().__init__()

        # Initialize constants
        self.numOfWorkspaces = 10
        # Initialize variables
        self.windowNames = json.loads(
            open(os.path.expanduser("~/.config/eww/scripts/windowNames.json")).read()
        )

        self.firstMonitor = "eDP-1"
        self.secondMonitor = "HDMI-A-1"
        self.targetMonitor = sys.argv[1]

        # check if target monitor is a number if it is not output usage
        if re.match("^[0-9]+$", self.targetMonitor):
            self.targetMonitor = int(self.targetMonitor)
            if self.targetMonitor == 0:
                self.targetMonitor = self.firstMonitor
                self.workspaceList = list(range(1, self.numOfWorkspaces + 1))
            elif self.targetMonitor == 1:
                self.targetMonitor = self.secondMonitor
                self.workspaceList = list(
                    range(self.numOfWorkspaces + 1, 2 * (self.numOfWorkspaces + 1))
                )
            else:
                print("Usage: python script.py [0|1]")
                sys.exit(1)
        else:
            print("Usage: python script.py [0|1]")
            sys.exit(1)

        self.debug = sys.argv[2] if len(sys.argv) > 2 else ""

        self.focusedws = int(
            json.loads(subprocess.check_output(["hyprctl", "-j", "monitors"]).decode())[
                0
            ]["activeWorkspace"]["id"]
        )
        # workspace number: 1 if occupied, 0 if not
        self.occupiedWorkspaces = {i: 0 for i in self.workspaceList}
        self.monitormap = {}
        self.workspaceNames = {}
        self.appgridIcon = (
            subprocess.check_output(
                ["geticons", "--no-fallbacks", "appgrid", "-s", "24", "-c", "1"]
            )
            .decode()
            .splitlines()[0]
        )
        # 1 extra because workspaces start from 1
        self.workspaces = [[] for i in self.workspaceList] + [[]]
        self.grids = ["" for i in self.workspaceList] + [""]

        # SETUP
        # add monitors
        self.monitor_event()

        # output = json.loads(self.i.workspaces())
        with subprocess.Popen(
            ["hyprctl", "-j", "workspaces"], stdout=subprocess.PIPE
        ) as proc:
            output = json.loads(proc.stdout.read().decode())
            for workspace in output:
                id = int(workspace["id"])
                name = workspace["name"]
                monitor = workspace["monitor"]
                if monitor == self.targetMonitor:
                    self.workspaceNames[id] = name

        # check occupied workspaceNames
        for num in self.workspaceNames.keys():
            self.occupiedWorkspaces[num] = 1

        # generateWidget initial widget
        self.generateWidget()

    # handle workspace create/destroy
    def workspace_event(self, workspace_num, occupied):
        self.occupiedWorkspaces[workspace_num] = occupied
        with subprocess.Popen(
            ["hyprctl", "-j", "workspaces"], stdout=subprocess.PIPE
        ) as proc:
            output = json.loads(proc.stdout.read().decode())
        for workspace in output:
            id = int(workspace["id"])
            name = workspace["monitor"]
            self.workspaceNames[id] = name

    # handle monitor (dis)connects
    def monitor_event(self):
        with subprocess.Popen(
            ["hyprctl", "-j", "monitors"], stdout=subprocess.PIPE
        ) as proc:
            output = json.loads(proc.stdout.read().decode())
        for monitor in output:
            id = int(monitor["id"])
            name = monitor["name"]
            self.monitormap[id] = name

    def applistClass(self, ws):
        with subprocess.Popen(
            ["hyprctl", "-j", "clients"], stdout=subprocess.PIPE
        ) as proc:
            classes = json.loads(proc.stdout.read().decode())
        classes = [c["class"] for c in classes if c["workspace"]["id"] == ws]
        return classes

    def getIcon(self, class_name):
        icon_list = (
            subprocess.check_output(
                ["geticons", "--no-fallbacks", class_name, "-s", "24", "-c", "1"]
            )
            .decode()
            .splitlines()
        )
        icon = icon_list[0] if icon_list else None
        if icon is None:
            lowerClass = class_name.lower()
            icon_list = (
                subprocess.check_output(
                    ["geticons", "--no-fallbacks", lowerClass, "-s", "24", "-c", "1"]
                )
                .decode()
                .splitlines()
            )
            icon = icon_list[0] if icon_list else None
        if icon is None:
            icon = self.appgridIcon
        return icon

    def get_appicons(self, ws):
        appicons = []
        applist = self.applistClass(ws)
        for class_name in applist:
            candidateClass = self.windowNames.get(class_name)
            if candidateClass is not None:
                class_name = candidateClass
            icon = self.getIcon(class_name)
            appicons.append(icon)
        return appicons

    def generateWidget(self):
        widget = ""
        for num in self.workspaceList:
            if num == self.focusedws:
                self.workspaces[num] = []
                status = "active-workspace"
                appicons = self.get_appicons(num)[0:4]  # only show up to 4 icons
                for icon in appicons:
                    self.workspaces[num].append(icon)
            else:
                status = "inactive-workspace"
            actualNum = num if num <= 10 else num - 10 # because split-workspace plugin still takes them as 11-20
            self.grids[
                num
            ] = f"""(button :onclick \"hyprctl dispatch split-workspace {actualNum}\" :class \"{status}\" :tooltip \"workspace {num}\"
			(box :orientation \"v\" :spacing 3 :space-evenly \"false\" :valign \"center\"
				(label :text \"{num}\" :class \"workspace-num\" :tooltip \"Workspace {num}\")
				(box """
            workspaceLen = len(self.workspaces[num])
            for i, icon in enumerate(self.workspaces[num]):
                image = f'(image :path "{icon}")'
                if i % 2 == 0:
                    self.grids[
                        num
                    ] += f"""
				(box :orientation \"v\" :spacing 3 :space-evenly \"false\" :valign \"center\"
					{image}
				"""
                    if i + 1 == workspaceLen:
                        self.grids[num] += ")"
                else:
                    self.grids[num] += f"{image} )"
            self.grids[num] += ") ) ) (sep)"

        gridString = "".join(self.grids)

        widget = f"""
		(eventbox :onscroll \"echo {{}} | sed -e 's/up/-1/g' -e 's/down/+1/g' | xargs hyprctl dispatch workspace\"
			(box :class \"workspaces\" :orientation \"h\" :spacing 3 :space-evenly \"false\" :valign \"center\"
				{gridString}
			)
		)
		""".strip()

        if self.debug == "debug":
            print("DEBUG INFO")
            print(f"Focused workspace: {self.focusedws}")
            print(f"WorkspaceNames: {self.workspaceNames}")
            print(f"Monitormap: {self.monitormap}")
            print(f"Occupied workspaces: {self.occupiedWorkspaces.keys()}")
            print("--------------------------------")
            print("allAppIcons:")
            for i, workspace_apps in enumerate(self.workspaces[1:]):
                for j, app in enumerate(workspace_apps):
                    print(f"Workspace {i+1}, app {j+1}: {app}")
            print("--------------------------------")
        else:
            # eww doesn't like newlines
            print(widget.replace("\n", ""))

    async def on_connect(self):
        if self.debug == "debug":
            print("Connected to Hyprland socket")
        self.c = await hyprland.Config.from_conf()

    async def on_workspace(self, ws):
        self.focusedws = int(ws)
        if self.debug == "debug":
            print(f"Workspace changed to {self.focusedws}")
        self.generateWidget()
        self.generateWidget()

    async def on_focusedmon(self, mon, ws):
        self.focusedws = int(ws)
        if self.debug == "debug":
            print(f"Monitor changed to {mon} at workspace {self.focusedws}")
        self.generateWidget()

    async def on_createworkspace(self, ws):
        self.focusedws = int(ws)
        if self.debug == "debug":
            print(f"Workspace created {self.focusedws}")
        if self.focusedws in self.workspaceList:
            self.workspace_event(self.focusedws, 1)
        self.generateWidget()

    async def on_destroyworkspace(self, ws):
        self.focusedws = int(ws)
        if self.debug == "debug":
            print(f"Workspace destroyed {self.focusedws}")
        if self.focusedws in self.workspaceList:
            self.workspace_event(self.focusedws, 0)
        self.generateWidget()

    async def on_moveworkspace(self, ws, mon):
        self.focusedws = int(ws)
        if self.debug == "debug":
            print(f"app moved to workspace {self.focusedws} on monitor {mon}")
        if self.focusedws in self.workspaceList:
            self.workspace_event(self.focusedws, 1)
        self.generateWidget()


w = Workspacer()

w.async_connect()
