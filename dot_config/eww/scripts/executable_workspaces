#!/usr/bin/env bash

firstMonitor="eDP-1"
secondMonitor="HDMI-A-1"
targetMonitor=$1
# check if target monitor is a number if it is not output usage
if [[ $targetMonitor =~ ^[0-9]+$ ]]; then
    if [[ $targetMonitor == 1 ]]; then
        targetMonitor=$firstMonitor
    elif [[ $targetMonitor == 2 ]]; then
        targetMonitor=$secondMonitor
    else
        echo "Usage: $0 [1|2]"
        exit 1
    fi
else
    echo "Usage: $0 [1|2]"
    exit 1
fi
debug="$2"

# get initial focused workspace
focusedws=$(hyprctl -j monitors | jq -r '.[] | select(.focused == true) | .activeWorkspace.id')

declare -A o=([1]=0 [2]=0 [3]=0 [4]=0 [5]=0 [6]=0 [7]=0 [8]=0 [9]=0 [10]=0)
declare -A monitormap
declare -A workspaceNames
appgridIcon=$(geticons --no-fallbacks "appgrid" -s 24 -c 1 | head -n 1)
declare -A allAppIcons
# initialize allAppIcons to be an array with 10x4 elements
for i in {1..9}; do
  for j in {0..3}; do
    allAppIcons[$i,$j]=""
  done
done
declare -A grids

# handle workspace create/destroy
workspace_event() {
  o[$1]=$2
  while read -r k v; do workspaceNames[$k]="$v"; done < <(hyprctl -j workspaceNames | jq -r '.[]|"\(.id) \(.monitor)"')
}
# handle monitor (dis)connects
monitor_event() {
  while read -r k v; do monitormap["$k"]=$v; done < <(hyprctl -j monitors | jq -r '.[]|"\(.name) \(.id) "')
}

applistClass() {
  ws="$1"
  # return a list of classes
  command="hyprctl -j clients | jq -jr '.[] | select(.workspace.id == "
  command+=$ws
  command+=") | .class + \"\n\"'"
  classes=$(eval $command)
  readarray -t classes <<< "$classes"
  printf '%s\n' "${classes[@]}"
}

getIconFallBack() {
  class="$1"
  # echo "Class: $class"
  icon=$(geticons --no-fallbacks "$class" -s 24 -c 1| head -n 1)
  if [[ $icon == "" ]]; then
    lowerClass=$(echo "$class" | tr '[:upper:]' '[:lower:]')
    icon=$(geticons --no-fallbacks "$lowerClass" -s 24 -c 1 | head -n 1)
    if [[ $icon == "" ]]; then
      # echo "Couldn't find icon for $class"
      icon=$(geticons --no-fallbacks "appgrid" -s 24 -c 1 | head -n 1)
    fi
  fi
  echo "$icon"
}

getIcon() {
  class="$1"
  # echo "Class: $class"
  icon=$(geticons --no-fallbacks "$class" -s 24 -c 1| head -n 1)
  if [[ $icon == "" ]]; then
    lowerClass=$(echo "$class" | tr '[:upper:]' '[:lower:]')
    icon=$(geticons --no-fallbacks "$lowerClass" -s 24 -c 1 | head -n 1)
  fi
  echo "$icon"
}

appicons(){
  ws="$1"
  appicons=("" "" "" "")
  # keep the applistClass as an array
  applistClass=($(applistClass "$ws"))
  for i in {0..3}; do
    class=${applistClass[$i]}
    icon=$(getIcon "$class")
    appicons[$i]="$icon"
  done
  echo "${appicons[*]}"
}

# generate eww widget
generate() {
# REFRESH ONLY FOCUSED WORKSPACE BUT STILL SHOW ALL WORKSPACES (UPDATE THE APPICONS ARRAY)
for num in {1..9}; do
  # if the workspace number is the focused workspace
  if [[ $num == $focusedws ]]; then
    status="active-workspace"
    appicons=($(appicons "$num"))
    for index in {0..3}; do
      icon=${appicons[$index]}
      allAppIcons[$num,$index]="$icon"
    done
  else
    status="inactive-workspace"
  fi
  grids[$num]="(button :onclick \"hyprctl dispatch exec '~/.config/hypr/scripts/workspace $num'\" :onrightclick \"hyprctl dispatch workspace $num && $HOME/.config/hypr/scripts/default_app\" :class \"$status\" :tooltip \"Workspace $num\" \
  (box "
  # the end result should be something like this:
  # box vertical
  # -box
  #   -box
  #     -image
  #   -box
  #     -image
  # -box
  #   -box
  #     -image
  #   -box
  #     -image

  # only create the inner boxe if allAppIcons is not empty at that index
  # check in pairs of 2
  # so the result is a 2x2 grid of boxes, though only create the boxes if there is an icon
  foundEmpty=false
  for i in {0..3}; do
    icon=${allAppIcons[$num,$i]}
    image="(image :path \"$icon\")"
    if [[ $icon != "" ]]; then
      if (( i % 2 == 0)); then
        grids[$num]+=" (box :orientation \"v\" :spacing 3 :space-evenly \"false\" :valign \"center\""
      fi
      grids[$num]+=" $image"
      # if the next element is empty or if i is not divisible by 2
      if (( i % 2 == 1)); then
        grids[$num]+=")"
      fi
    else
      if [[ $foundEmpty == false ]]; then
        # check if i is notd divisible by 2 and not 0
        if (( i % 2 == 1 && i != 0)); then
          grids[$num]+=")"
        fi
        foundEmpty=true
      fi
    fi
  done
  grids[$num]+=") )" # close the button and box
done

gridString=""
for num in {1..9}; do
  if [[ ${o[$num]} == 1 ]]; then
    gridString+="${grids[$num]} (sep)"
  fi
done

widget="(eventbox :onscroll \"echo {} | sed -e 's/up/-1/g' -e 's/down/+1/g' | xargs hyprctl dispatch workspace\" \
          (box	:class \"workspaces\"	:orientation \"h\" :spacing 3 :space-evenly \"false\" :valign \"center\"	\
              $gridString \
          ) \
        )"

if [[ $debug == "debug" ]]; then
  echo "DEBUG INFO"
  echo "Focused workspace: $focusedws"
  echo "WorkspaceNames: ${workspaceNames[@]}"
  echo "Monitormap: ${monitormap[@]}"
  echo "Occupied workspaces: ${!o[@]}"
  echo "--------------------------------"
  echo "allAppIcons: "
  for i in {1..9}; do
    for j in {0..3}; do
      echo "Workspace $i, app $j: ${allAppIcons[$i,$j]}"
    done
  done
  echo  "--------------------------------"
else
  echo "$widget"
fi
}

# SETUP

# add monitors
monitor_event

# add workspaceNames
while read -r k v; do workspaceNames[$k]="$v"; done < <(hyprctl -j workspaces | jq -r '.[]|"\(.id) \(.monitor)"')

# check occupied workspaceNames
for num in "${!workspaceNames[@]}"; do
  o[$num]=1
done
# generate initial widget
generate

# main loop
socat -u UNIX-CONNECT:/tmp/hypr/"$HYPRLAND_INSTANCE_SIGNATURE"/.socket2.sock - | rg --line-buffered "workspace|mon(itor)?" | while read -r line; do
  case ${line%>>*} in
    "workspace")
      focusedws=${line#*>>}
      ;;
    "focusedmon")
      focusedws=${line#*,}
      ;;
    "createworkspace")
      workspace_event "${line#*>>}" 1
      ;;
    "destroyworkspace")
      workspace_event "${line#*>>}" 0
      ;;
    "monitor"*)
      monitor_event
      ;;
  esac
  generate
done
