#!/usr/bin/env python3

# Author: https://github.com/BallowTK

import json
import os
import random
import re
import subprocess
import sys

import hyprland


class Workspacer(hyprland.Events):
    def __init__(self):
        self.i = hyprland.info.Info()
        self.c = hyprland.Config()
        super().__init__()

        self.numOfWorkspaces = 10
        self.windowNames = json.loads(open(os.path.expanduser("~/.config/eww/scripts/windowNames.json")).read())

        self.monitormap = {}
        self.targetMonitor = sys.argv[1]
        self.monitor_event()

        # check if target monitor is a number if it is not output usage
        if re.match("^[0-9]+$", self.targetMonitor):
            self.targetMonitor = int(self.targetMonitor)
        else:
            print("Usage: workspaces [0|1]")
            sys.exit(1)

        self.debug = sys.argv[2] if len(sys.argv) > 2 else ""

        self.focusedMon = self.targetMonitor
        self.workspaceStart = self.targetMonitor * self.numOfWorkspaces + 1
        self.workspaceEnd = self.numOfWorkspaces * self.targetMonitor + self.numOfWorkspaces
        self.workspaceRange = range(self.workspaceStart, self.workspaceEnd + 1)
        self.startingFocusedws = int(
            json.loads(subprocess.check_output(["hyprctl", "-j", "monitors"]).decode())[0]["activeWorkspace"]["id"]
        )
        self.focusedws = self.startingFocusedws if self.startingFocusedws in self.workspaceRange else 1
        self.prevFocusedws = self.focusedws
        self.occupiedWorkspaces = {}
        self.appgridIcon = (
            subprocess.check_output(["geticons", "--no-fallbacks", "appgrid", "-s", "22", "-c", "1"])
            .decode()
            .splitlines()[0]
        )
        self.workspaces = {
            i: {"status": "inactive-workspace", "icons": [[], []]}
            for i in self.workspaceRange
        }

        # set monitorMap and occupiedWorkspaces
        self.monitor_event()
        self.refresh_workspace()
        # generateWidget initial widget
        self.generateJSON()

    def refresh_workspace(self):
        with subprocess.Popen(["hyprctl", "-j", "workspaces"], stdout=subprocess.PIPE) as proc:
            output = json.loads(proc.stdout.read().decode())
        for workspace in output:
            id = int(workspace["id"])
            monitor = self.monitormap[workspace["monitor"]]
            if monitor == self.targetMonitor:
                self.occupiedWorkspaces[id] = 1

    # handle workspace create/destroy
    def workspace_event(self, workspace_num, occupied):
        self.occupiedWorkspaces[workspace_num] = occupied
        self.refresh_workspace()

    # handle monitor (dis)connects
    def monitor_event(self):
        with subprocess.Popen(["hyprctl", "-j", "monitors"], stdout=subprocess.PIPE) as proc:
            output = json.loads(proc.stdout.read().decode())
        for monitor in output:
            id = int(monitor["id"])
            name = monitor["name"]
            self.monitormap[name] = id

    # temporarily until i find a better way to get the class name from ipc
    def applistClass(self, ws):
        with subprocess.Popen(["hyprctl", "-j", "clients"], stdout=subprocess.PIPE) as proc:
            clients = json.loads(proc.stdout.read().decode())
        classes = [
            client["class"]
            for client in clients
            if client["workspace"]["id"] == ws and int(client["monitor"]) == self.targetMonitor
        ]
        return classes

    def getIcon(self, class_name):
        # Attempt to use any manually set icons
        if self.windowNames.get(class_name) is not None:
            icon = self.windowNames[class_name]["icon"]
            if os.path.exists(os.path.expanduser(icon)):
                return os.path.expanduser(icon)
            else:
                class_name = icon
        # attempt to get icon from geticons, with the provided class_name
        icon_list = (
            subprocess.check_output(["geticons", "--no-fallbacks", class_name, "-s", "22", "-c", "1"])
            .decode()
            .splitlines()
        )
        icon = icon_list[0] if icon_list else None
        # if icon is not found, try again with the class_name in lowercase
        if icon is None:
            lowerClass = class_name.lower()
            icon_list = (
                subprocess.check_output(["geticons", "--no-fallbacks", lowerClass, "-s", "22", "-c", "1"])
                .decode()
                .splitlines()
            )
            icon = icon_list[0] if icon_list else None
        if icon is None and class_name.strip() != "":
            # send a notification that icon with class_name was not found
            # subprocess.Popen(
            # 	[
            # 		"notify-send",
            # 		"-u",
            # 		"critical",
            # 		"-t",
            # 		"5000",
            # 		f"Icon not found for {class_name} manually fix in windowNames.json",
            # 	]
            # )
            icon = self.appgridIcon
        return icon

    def setAppicons(self, ws):
        self.logEvent(f"Setting app icons for workspace {ws}")
        self.workspaces[ws]["icons"] = [[], []]
        classes = self.applistClass(ws)[0:4]  # only render up to 4 icons
        for i, class_name in enumerate(classes):
            icon = self.getIcon(class_name)
            self.workspaces[ws]["icons"][i % 2].append(icon)

    def generateJSON(self):
        for num in self.workspaceRange:
            if num == self.focusedws:
                self.setAppicons(num)
                status = "active-workspace"
            else:
                status = "inactive-workspace"
            self.workspaces[num]["status"] = status
        print(
            json.dumps(
                [
                    {"num": i if i <= self.numOfWorkspaces else i - self.numOfWorkspaces, **self.workspaces[i]}
                    for i in self.workspaceRange
                ]
            ),
            flush=True,
        )

    def logEvent(self, event):
        if self.debug == "debug":
            print(event)

    async def on_connect(self):
        self.logEvent("Connected to Hyprland socket")
        self.generateJSON()
        # self.c = await hyprland.Config.from_conf()

    async def on_workspace(self, ws):
        self.logEvent(f"Workspace changed to {ws}")
        ws = int(ws)
        inTargetMonitor = ws in self.workspaceRange
        if inTargetMonitor:
            self.prevFocusedws = self.focusedws
            self.focusedws = ws
            self.workspace_event(self.focusedws, 1)
        self.generateJSON()

    async def on_focusedmon(self, mon, ws):
        self.logEvent(f"Monitor changed to {mon} at workspace {ws}")
        self.focusedMon = self.monitormap[mon]
        ws = int(ws)
        inTargetMonitor = ws in self.workspaceRange
        if inTargetMonitor:
            self.prevFocusedws = self.focusedws
            self.focusedws = ws
            self.workspace_event(self.focusedws, 1)
        self.generateJSON()

    async def on_createworkspace(self, ws):
        self.logEvent(f"Workspace {ws} created")
        # ws = int(ws)
        # inTargetMonitor = ws in self.workspaceRange
        # if inTargetMonitor:
        #   self.focusedws = ws
        #   self.workspace_event(self.focusedws, 1)
        # self.generateJSON()
        pass

    async def on_destroyworkspace(self, ws):
        self.logEvent(f"Workspace {ws} destroyed")
        # ws = int(ws)
        # inTargetMonitor = ws in self.workspaceRange
        # if inTargetMonitor:
        #   self.focusedws = ws
        #   self.workspace_event(self.focusedws, 0)
        # self.generateJSON()
        pass

    async def on_moveworkspace(self, ws, mon):
        self.logEvent(f"app moved to workspace {ws} on monitor {mon}")
        ws = int(ws)
        inTargetMonitor = ws in self.workspaceRange
        if inTargetMonitor:
            self.prevFocusedws = self.focusedws
            self.focusedws = ws
            self.workspace_event(self.focusedws, 1)
        self.generateJSON()

    async def on_activewindow(self, window_class, window_title):
        self.logEvent(f"window changed to {window_class} with title {window_title}")
        self.generateJSON()

    async def on_closewindow(self, window_address):
        self.logEvent(f"window with address {window_address} destroyed")
        self.generateJSON()

    async def on_movewindow(self, window_address, workspace):
        self.logEvent(f"window with address {window_address} moved to workspace {workspace}")
        self.focusedMon = 0 if workspace < 10 else 1
        self.generate()

    async def on_focusedmon(self, mon, ws):
        self.focusedMon = self.monitormap[mon]
        self.logEvent(f"monitor changed to {self.focusedMon} target: {self.targetMonitor}")
        if self.focusedMon == self.targetMonitor:
            self.focusedws = int(ws)
            self.generate()


w = Workspacer()
try:
    w.async_connect()
except Exception as e:
    print(e)
    w.logEvent("Failed to connect to Hyprland socket")
