#!/usr/bin/env python3

import subprocess
import re
import json
import os
import sys
import hyprland


class Appnames(hyprland.Events):
	def __init__(self):
		# Initialize hyprland
		self.i = hyprland.info.Info()
		self.c = hyprland.Config()
		super().__init__()

		# Initialize variables
		self.windowNames = json.loads(
			open(os.path.expanduser("~/.config/eww/scripts/windowNames.json")).read()
		)
		self.firstMonitor = "eDP-1"
		self.secondMonitor = "HDMI-A-1"
		self.targetMonitor = sys.argv[1]

		# check if target monitor is a number if it is not output usage
		if re.match("^[0-9]+$", self.targetMonitor):
			self.targetMonitor = int(self.targetMonitor)
		else:
			print("Usage: python script.py [0|1]")
			sys.exit(1)

		self.debug = sys.argv[2] if len(sys.argv) > 2 else ""

		self.appgridIcon = "/usr/share/icons/Papirus/24x24/apps/appgrid.svg"

		self.focusedMon = self.targetMonitor
		self.currClass = ""
		self.currIconPath = ""
		self.currTitle = ""

	def getIcon(self, class_name):
		icon_list = (
			subprocess.check_output(
				["geticons", "--no-fallbacks", class_name, "-s", "24", "-c", "1"]
			)
			.decode()
			.splitlines()
		)
		icon = icon_list[0] if icon_list else None
		if icon is None:
			lowerClass = class_name.lower()
			icon_list = (
				subprocess.check_output(
					["geticons", "--no-fallbacks", lowerClass, "-s", "24", "-c", "1"]
				)
				.decode()
				.splitlines()
			)
			icon = icon_list[0] if icon_list else None
		if icon is None and class_name.strip() != "":
			# send a notification that icon with class_name was not found
			subprocess.Popen(
				[
					"notify-send",
					"-u",
					"critical",
					"-t",
					"5000",
					f"Icon not found for {class_name} manually fix in windowNames.json",
				]
			)
			icon = self.appgridIcon
		return icon

	def fixClass(self, class_name):
		if self.windowNames.get(class_name) is not None:
			return self.windowNames[class_name]
		else:
			return class_name

	def logEvent(self, event):
		if self.debug == "debug":
			print(event)

	def generate(self):
		title = f"{self.currClass} | {self.currTitle}"
		if self.currTitle == "":
			self.currIconPath = self.appgridIcon
			title = "No focused window"
		print(json.dumps({"title": title, "icon": self.currIconPath}), flush=True)

	async def on_activewindow(self, window_class, window_title):
		if self.focusedMon == self.targetMonitor:
			self.currClass = window_class
			self.currTitle = window_title
			self.currIconPath = self.getIcon(self.fixClass(window_class))
			self.logEvent(f"window changed to {window_class} with title {window_title}")
			self.generate()


a = Appnames()

a.async_connect()